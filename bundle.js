(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var feathers=require("feathers/client"),hooks=require("feathers-hooks"),auth=require("feathers-authentication/client"),rest=require("feathers-rest/client"),superagent=require("superagent");module.exports=function(e){return feathers().configure(rest(e).superagent(superagent)).configure(hooks()).configure(auth())};

},{"feathers-authentication/client":14,"feathers-hooks":25,"feathers-rest/client":26,"feathers/client":37,"superagent":126}],2:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _taggedTemplateLiteral(e,n){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var _templateObject=_taggedTemplateLiteral([" \n\n<main>\n\t<h1>Hello world</h1>\t\n\t<ul>\n\t\t",'\n\t</ul>\n\t<button id="login" onclick=',">Sign in</button>\n</main>\n"],[" \n\n<main>\n\t<h1>Hello world</h1>\t\n\t<ul>\n\t\t",'\n\t</ul>\n\t<button id="login" onclick=',">Sign in</button>\n</main>\n"]),_inu=require("inu"),_inux=require("inux"),_app=require("./users/app"),_app2=_interopRequireDefault(_app),_summary=require("./users/views/summary"),_summary2=_interopRequireDefault(_summary),_profile=require("./users/views/profile"),_profile2=_interopRequireDefault(_profile),view=function(e,n){return console.log(e),(0,_inu.html)(_templateObject,e.user.map(function(e){return(0,_summary2.default)(e,n)}),function(){return n((0,_inux.navigate)("login"))})},home=(0,_inux.Domain)({name:"home",init:function(){return{model:{}}},update:{},routes:[["/",function(e,n,t){return view(n,t)}],["/#users/:id",_profile2.default]]});module.exports=function(e,n){var t=(0,_inux.App)([home,(0,_app2.default)({api:n})]),u=(0,_inu.start)(t);(0,_inu.pull)(u.views(),_inu.pull.drain(function(n){_inu.html.update(e,n)}))};

},{"./users/app":143,"./users/views/profile":145,"./users/views/summary":146,"inu":54,"inux":66}],3:[function(require,module,exports){
(function (process,__dirname){
"use strict";var _require=require("path"),join=_require.join,config={port:5e3,host:"http://localhost:3030",url:"//localhost:5000",entry:join(__dirname,"browser.js"),staticPath:join(__dirname,".")};config.port=process.env.PORT,config.host="https://grad-app-server-dev.ap-southeast-2.elasticbeanstalk.com/",config.url="//staging.holodex.is",config.letsencrypt={path:join(__dirname,"letsencrypt"),host:"staging.holodex.is",email:"michael.williams@enspiral.com",agreeTos:!0},module.exports=config;

}).call(this,require('_process'),"/")

},{"_process":80,"path":78}],4:[function(require,module,exports){
"use strict";var domready=require("domready"),start=require("./app"),config=require("./config"),Api=require("./api"),api=Api(config.host);domready(function(){start(document.querySelector("main"),api)});

},{"./api":1,"./app":2,"./config":3,"domready":12}],5:[function(require,module,exports){
function replacer(t,e){return util.isUndefined(e)?""+e:util.isNumber(e)&&!isFinite(e)?e.toString():util.isFunction(e)||util.isRegExp(e)?e.toString():e}function truncate(t,e){return util.isString(t)?t.length<e?t:t.slice(0,e):t}function getMessage(t){return truncate(JSON.stringify(t.actual,replacer),128)+" "+t.operator+" "+truncate(JSON.stringify(t.expected,replacer),128)}function fail(t,e,r,i,s){throw new assert.AssertionError({message:r,actual:t,expected:e,operator:i,stackStartFunction:s})}function ok(t,e){t||fail(t,!0,e,"==",assert.ok)}function _deepEqual(t,e){if(t===e)return!0;if(util.isBuffer(t)&&util.isBuffer(e)){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0}return util.isDate(t)&&util.isDate(e)?t.getTime()===e.getTime():util.isRegExp(t)&&util.isRegExp(e)?t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase:util.isObject(t)||util.isObject(e)?objEquiv(t,e):t==e}function isArguments(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function objEquiv(t,e){if(util.isNullOrUndefined(t)||util.isNullOrUndefined(e))return!1;if(t.prototype!==e.prototype)return!1;if(util.isPrimitive(t)||util.isPrimitive(e))return t===e;var r=isArguments(t),i=isArguments(e);if(r&&!i||!r&&i)return!1;if(r)return t=pSlice.call(t),e=pSlice.call(e),_deepEqual(t,e);var s,n,a=objectKeys(t),o=objectKeys(e);if(a.length!=o.length)return!1;for(a.sort(),o.sort(),n=a.length-1;n>=0;n--)if(a[n]!=o[n])return!1;for(n=a.length-1;n>=0;n--)if(s=a[n],!_deepEqual(t[s],e[s]))return!1;return!0}function expectedException(t,e){return!(!t||!e)&&("[object RegExp]"==Object.prototype.toString.call(e)?e.test(t):t instanceof e||e.call({},t)===!0)}function _throws(t,e,r,i){var s;util.isString(r)&&(i=r,r=null);try{e()}catch(t){s=t}if(i=(r&&r.name?" ("+r.name+").":".")+(i?" "+i:"."),t&&!s&&fail(s,r,"Missing expected exception"+i),!t&&expectedException(s,r)&&fail(s,r,"Got unwanted exception"+i),t&&s&&r&&!expectedException(s,r)||!t&&s)throw s}var util=require("util/"),pSlice=Array.prototype.slice,hasOwn=Object.prototype.hasOwnProperty,assert=module.exports=ok;assert.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=getMessage(this),this.generatedMessage=!0);var e=t.stackStartFunction||fail;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else{var r=new Error;if(r.stack){var i=r.stack,s=e.name,n=i.indexOf("\n"+s);if(n>=0){var a=i.indexOf("\n",n+1);i=i.substring(a+1)}this.stack=i}}},util.inherits(assert.AssertionError,Error),assert.fail=fail,assert.ok=ok,assert.equal=function(t,e,r){t!=e&&fail(t,e,r,"==",assert.equal)},assert.notEqual=function(t,e,r){t==e&&fail(t,e,r,"!=",assert.notEqual)},assert.deepEqual=function(t,e,r){_deepEqual(t,e)||fail(t,e,r,"deepEqual",assert.deepEqual)},assert.notDeepEqual=function(t,e,r){_deepEqual(t,e)&&fail(t,e,r,"notDeepEqual",assert.notDeepEqual)},assert.strictEqual=function(t,e,r){t!==e&&fail(t,e,r,"===",assert.strictEqual)},assert.notStrictEqual=function(t,e,r){t===e&&fail(t,e,r,"!==",assert.notStrictEqual)},assert.throws=function(t,e,r){_throws.apply(this,[!0].concat(pSlice.call(arguments)))},assert.doesNotThrow=function(t,e){_throws.apply(this,[!1].concat(pSlice.call(arguments)))},assert.ifError=function(t){if(t)throw t};var objectKeys=Object.keys||function(t){var e=[];for(var r in t)hasOwn.call(t,r)&&e.push(r);return e};

},{"util/":135}],6:[function(require,module,exports){
function belCreateElement(e,t,a){function n(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var a=e[t];if(Array.isArray(a))n(a);else{if(("number"==typeof a||"boolean"==typeof a||a instanceof Date||a instanceof RegExp)&&(a=a.toString()),"string"==typeof a){if(o.lastChild&&"#text"===o.lastChild.nodeName){o.lastChild.nodeValue+=a;continue}a=document.createTextNode(a)}a&&a.nodeType&&o.appendChild(a)}}}var o;SVG_TAGS.indexOf(e)!==-1&&(t.namespace=SVGNS);var l=!1;if(t.namespace&&(l=t.namespace,delete t.namespace),o=l?document.createElementNS(l,e):document.createElement(e),t.onload||t.onunload){var r=t.onload||function(){},i=t.onunload||function(){};onload(o,function(){r(o)},function(){i(o)},belCreateElement.caller.caller.caller),delete t.onload,delete t.onunload}for(var f in t)if(t.hasOwnProperty(f)){var c=f.toLowerCase(),s=t[f];if("classname"===c&&(c="class",f="class"),"htmlFor"===f&&(f="for"),BOOL_PROPS[c])if("true"===s)s=c;else if("false"===s)continue;"on"===c.slice(0,2)?o[f]=s:l?o.setAttributeNS(null,f,s):o.setAttribute(f,s)}return n(a),o}var document=require("global/document"),hyperx=require("hyperx"),onload=require("on-load"),SVGNS="http://www.w3.org/2000/svg",BOOL_PROPS={autofocus:1,checked:1,defaultchecked:1,disabled:1,formnovalidate:1,indeterminate:1,readonly:1,required:1,selected:1,willvalidate:1},SVG_TAGS=["svg","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hkern","image","line","linearGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","stop","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"];module.exports=hyperx(belCreateElement),module.exports.createElement=belCreateElement;

},{"global/document":47,"hyperx":50,"on-load":76}],7:[function(require,module,exports){

},{}],8:[function(require,module,exports){
function Emitter(t){if(t)return mixin(t)}function mixin(t){for(var e in Emitter.prototype)t[e]=Emitter.prototype[e];return t}"undefined"!=typeof module&&(module.exports=Emitter),Emitter.prototype.on=Emitter.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},Emitter.prototype.once=function(t,e){function i(){this.off(t,i),e.apply(this,arguments)}return i.fn=e,this.on(t,i),this},Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r,s=0;s<i.length;s++)if(r=i[s],r===e||r.fn===e){i.splice(s,1);break}return this},Emitter.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),i=this._callbacks["$"+t];if(i){i=i.slice(0);for(var r=0,s=i.length;r<s;++r)i[r].apply(this,e)}return this},Emitter.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},Emitter.prototype.hasListeners=function(t){return!!this.listeners(t).length};

},{}],9:[function(require,module,exports){
function useColors(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function formatArgs(){var o=arguments,e=this.useColors;if(o[0]=(e?"%c":"")+this.namespace+(e?" %c":" ")+o[0]+(e?"%c ":" ")+"+"+exports.humanize(this.diff),!e)return o;var r="color: "+this.color;o=[o[0],r,"color: inherit"].concat(Array.prototype.slice.call(o,1));var t=0,s=0;return o[0].replace(/%[a-z%]/g,function(o){"%%"!==o&&(t++,"%c"===o&&(s=t))}),o.splice(s,0,r),o}function log(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function save(o){try{null==o?exports.storage.removeItem("debug"):exports.storage.debug=o}catch(o){}}function load(){var o;try{o=exports.storage.debug}catch(o){}return o}function localstorage(){try{return window.localStorage}catch(o){}}exports=module.exports=require("./debug"),exports.log=log,exports.formatArgs=formatArgs,exports.save=save,exports.load=load,exports.useColors=useColors,exports.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:localstorage(),exports.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],exports.formatters.j=function(o){return JSON.stringify(o)},exports.enable(load());

},{"./debug":10}],10:[function(require,module,exports){
function selectColor(){return exports.colors[prevColor++%exports.colors.length]}function debug(e){function r(){}function o(){var e=o,r=+new Date,s=r-(prevTime||r);e.diff=s,e.prev=prevTime,e.curr=r,prevTime=r,null==e.useColors&&(e.useColors=exports.useColors()),null==e.color&&e.useColors&&(e.color=selectColor());var t=Array.prototype.slice.call(arguments);t[0]=exports.coerce(t[0]),"string"!=typeof t[0]&&(t=["%o"].concat(t));var n=0;t[0]=t[0].replace(/%([a-z%])/g,function(r,o){if("%%"===r)return r;n++;var s=exports.formatters[o];if("function"==typeof s){var p=t[n];r=s.call(e,p),t.splice(n,1),n--}return r}),"function"==typeof exports.formatArgs&&(t=exports.formatArgs.apply(e,t));var p=o.log||exports.log||console.log.bind(console);p.apply(e,t)}r.enabled=!1,o.enabled=!0;var s=exports.enabled(e)?o:r;return s.namespace=e,s}function enable(e){exports.save(e);for(var r=(e||"").split(/[\s,]+/),o=r.length,s=0;s<o;s++)r[s]&&(e=r[s].replace(/\*/g,".*?"),"-"===e[0]?exports.skips.push(new RegExp("^"+e.substr(1)+"$")):exports.names.push(new RegExp("^"+e+"$")))}function disable(){exports.enable("")}function enabled(e){var r,o;for(r=0,o=exports.skips.length;r<o;r++)if(exports.skips[r].test(e))return!1;for(r=0,o=exports.names.length;r<o;r++)if(exports.names[r].test(e))return!0;return!1}function coerce(e){return e instanceof Error?e.stack||e.message:e}exports=module.exports=debug,exports.coerce=coerce,exports.disable=disable,exports.enable=enable,exports.enabled=enabled,exports.humanize=require("ms"),exports.names=[],exports.skips=[],exports.formatters={};var prevColor=0,prevTime;

},{"ms":75}],11:[function(require,module,exports){
module.exports=function(){for(var o=0;o<arguments.length;o++)if(void 0!==arguments[o])return arguments[o]};

},{}],12:[function(require,module,exports){
!function(e,t){"undefined"!=typeof module?module.exports=t():"function"==typeof define&&"object"==typeof define.amd?define(t):this[e]=t()}("domready",function(){var e,t=[],n=document,o=n.documentElement.doScroll,d="DOMContentLoaded",i=(o?/^loaded|^c/:/^loaded|^i|^c/).test(n.readyState);return i||n.addEventListener(d,e=function(){for(n.removeEventListener(d,e),i=1;e=t.shift();)e()}),function(e){i?setTimeout(e,0):t.push(e)}});

},{}],13:[function(require,module,exports){
function EventEmitter(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function isFunction(e){return"function"==typeof e}function isNumber(e){return"number"==typeof e}function isObject(e){return"object"==typeof e&&null!==e}function isUndefined(e){return void 0===e}module.exports=EventEmitter,EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.prototype.setMaxListeners=function(e){if(!isNumber(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},EventEmitter.prototype.emit=function(e){var t,i,n,s,r,o;if(this._events||(this._events={}),"error"===e&&(!this._events.error||isObject(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;var h=new Error('Uncaught, unspecified "error" event. ('+t+")");throw h.context=t,h}if(i=this._events[e],isUndefined(i))return!1;if(isFunction(i))switch(arguments.length){case 1:i.call(this);break;case 2:i.call(this,arguments[1]);break;case 3:i.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),i.apply(this,s)}else if(isObject(i))for(s=Array.prototype.slice.call(arguments,1),o=i.slice(),n=o.length,r=0;r<n;r++)o[r].apply(this,s);return!0},EventEmitter.prototype.addListener=function(e,t){var i;if(!isFunction(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,isFunction(t.listener)?t.listener:t),this._events[e]?isObject(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,isObject(this._events[e])&&!this._events[e].warned&&(i=isUndefined(this._maxListeners)?EventEmitter.defaultMaxListeners:this._maxListeners,i&&i>0&&this._events[e].length>i&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())),this},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.once=function(e,t){function i(){this.removeListener(e,i),n||(n=!0,t.apply(this,arguments))}if(!isFunction(t))throw TypeError("listener must be a function");var n=!1;return i.listener=t,this.on(e,i),this},EventEmitter.prototype.removeListener=function(e,t){var i,n,s,r;if(!isFunction(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(i=this._events[e],s=i.length,n=-1,i===t||isFunction(i.listener)&&i.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(isObject(i)){for(r=s;r-- >0;)if(i[r]===t||i[r].listener&&i[r].listener===t){n=r;break}if(n<0)return this;1===i.length?(i.length=0,delete this._events[e]):i.splice(n,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,i;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i=this._events[e],isFunction(i))this.removeListener(e,i);else if(i)for(;i.length;)this.removeListener(e,i[i.length-1]);return delete this._events[e],this},EventEmitter.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?isFunction(this._events[e])?[this._events[e]]:this._events[e].slice():[]},EventEmitter.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(isFunction(t))return 1;if(t)return t.length}return 0},EventEmitter.listenerCount=function(e,t){return e.listenerCount(t)};

},{}],14:[function(require,module,exports){
module.exports=require("./lib/client/index");

},{"./lib/client/index":16}],15:[function(require,module,exports){
"use strict";function _defineProperty(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function populateParams(){return function(e){var a=e.app;Object.assign(e.params,{user:a.get("user"),token:a.get("token")})}}function populateHeader(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return function(a){a.params.token&&(a.params.headers=Object.assign({},_defineProperty({},e.header||"authorization",a.params.token),a.params.headers))}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.populateParams=populateParams,exports.populateHeader=populateHeader;

},{}],16:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t}function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=Object.assign({},defaults,e);return function(){var e=this;e.get("storage")||e.set("storage",(0,_utils.getStorage)(t.storage)),e.authenticate=function(){var o=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],r=this.get("storage"),n=Promise.resolve(o);o.type||(n=(0,_utils.getJWT)(t.tokenKey,t.cookie,this.get("storage")).then(function(e){return e?{type:"token",token:e}:Promise.reject(new _feathersErrors2.default.NotAuthenticated("Could not find stored JWT and no authentication type was given"))}));var i=function(o){return e.set("token",o.token),e.set("user",o.data),Promise.resolve(r.setItem(t.tokenKey,o.token)).then(function(){return o})};return n.then(function(o){var r=void 0;if(o.endpoint)r=o.endpoint;else if("local"===o.type)r=t.localEndpoint;else{if("token"!==o.type)throw new Error("Unsupported authentication 'type': "+o.type);r=t.tokenEndpoint}return(0,_utils.connected)(e).then(function(t){if(e.rest)return e.service(r).create(o).then(i);var n=e.io?"emit":"send";return(0,_utils.authenticateSocket)(o,t,n).then(i)})})},e.logout=function(){return e.set("user",null),e.set("token",null),(0,_utils.clearCookie)(t.cookie),Promise.resolve(e.get("storage").removeItem(t.tokenKey)).then(function(){if(e.io||e.primus){var t=e.io?"emit":"send",o=e.io?e.io:e.primus;return(0,_utils.logoutSocket)(o,t)}})},e.mixins.push(function(e){if("function"!=typeof e.before||"function"!=typeof e.after)throw new Error("It looks like feathers-hooks isn't configured. It is required before running feathers-authentication.");e.before(hooks.populateParams(t))}),e.rest&&e.mixins.push(function(e){e.before(hooks.populateHeader(t))})}};var _feathersErrors=require("feathers-errors"),_feathersErrors2=_interopRequireDefault(_feathersErrors),_hooks=require("./hooks"),hooks=_interopRequireWildcard(_hooks),_utils=require("./utils"),defaults={cookie:"feathers-jwt",tokenKey:"feathers-jwt",localEndpoint:"/auth/local",tokenEndpoint:"/auth/token"};module.exports=exports.default;

},{"./hooks":15,"./utils":17,"feathers-errors":22}],17:[function(require,module,exports){
"use strict";function connected(e){return new Promise(function(t,o){if(e.rest)return t();var n=e.io||e.primus;if(!n)return o(new Error("It looks like no client connection has been configured."));if(n.once("disconnect",o),n.once("close",o),e.io&&!n.connected||e.primus&&3!==n.readyState){var r=e.primus?"open":"connect";n.once(r,function(){return t(n)})}else t(n)})}function authenticateSocket(e,t,o){return new Promise(function(n,r){t.once("unauthorized",r),t.once("authenticated",n),t[o]("authenticate",e)})}function logoutSocket(e,t){return new Promise(function(o,n){e[t]("logout",function(e){e&&n(e),o()})})}function getCookie(e){if("undefined"!=typeof document){var t="; "+document.cookie,o=t.split("; "+e+"=");if(2===o.length)return o.pop().split(";").shift()}return null}function clearCookie(e){return"undefined"!=typeof document&&(document.cookie=e+"=;expires=Thu, 01 Jan 1970 00:00:01 GMT;"),null}function getJWT(e,t,o){return Promise.resolve(o.getItem(e)).then(function(e){var o=getCookie(t);return o?o:e})}function getStorage(e){return e?e:{store:{},getItem:function(e){return this.store[e]},setItem:function(e,t){return this.store[e]=t},removeItem:function(e){return delete this.store[e],this}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.connected=connected,exports.authenticateSocket=authenticateSocket,exports.logoutSocket=logoutSocket,exports.getCookie=getCookie,exports.clearCookie=clearCookie,exports.getJWT=getJWT,exports.getStorage=getStorage;

},{}],18:[function(require,module,exports){
"use strict";function getArguments(e,t){return converters[e](t)}Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};exports.default=getArguments;var noop=exports.noop=function(){},getCallback=function(e){var t=e[e.length-1];return"function"==typeof t?t:noop},getParams=function(e,t){return"object"===_typeof(e[t])?e[t]:{}},updateOrPatch=function(e){return function(t){var r=t[0],o=t[1],n=getCallback(t),a=getParams(t,2);if("function"==typeof r)throw new Error("First parameter for '"+e+"' can not be a function");if("object"!==("undefined"==typeof o?"undefined":_typeof(o)))throw new Error("No data provided for '"+e+"'");if(t.length>4)throw new Error("Too many arguments for '"+e+"' service method");return[r,o,a,n]}},getOrRemove=function(e){return function(t){var r=t[0],o=getParams(t,1),n=getCallback(t);if(t.length>3)throw new Error("Too many arguments for '"+e+"' service method");if("function"==typeof r)throw new Error("First parameter for '"+e+"' can not be a function");return[r,o,n]}},converters=exports.converters={find:function(e){var t=getCallback(e),r=getParams(e,0);if(e.length>2)throw new Error("Too many arguments for 'find' service method");return[r,t]},create:function(e){var t=e[0],r=getParams(e,1),o=getCallback(e);if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))throw new Error("First parameter for 'create' must be an object");if(e.length>3)throw new Error("Too many arguments for 'create' service method");return[t,r,o]},update:updateOrPatch("update"),patch:updateOrPatch("patch"),get:getOrRemove("get"),remove:getOrRemove("remove")};

},{}],19:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var _arguments=require("./arguments"),_arguments2=_interopRequireDefault(_arguments),_utils=require("./utils"),_hooks=require("./hooks"),_hooks2=_interopRequireDefault(_hooks);exports.default={getArguments:_arguments2.default,stripSlashes:_utils.stripSlashes,each:_utils.each,hooks:_hooks2.default,matcher:_utils.matcher,sorter:_utils.sorter},module.exports=exports.default;

},{"./arguments":18,"./hooks":20,"./utils":21}],20:[function(require,module,exports){
"use strict";function getOrRemove(e){return{id:e[0],params:e[1],callback:e[2]}}function updateOrPatch(e){return{id:e[0],data:e[1],params:e[2],callback:e[3]}}function hookObject(e,t,a){var r=converters[e](a);return r.method=e,r.type=t,r}function defaultMakeArguments(e){var t=[];return"undefined"!=typeof e.id&&t.push(e.id),e.data&&t.push(e.data),t.push(e.params||{}),t.push(e.callback),t}function makeArguments(e){return"find"===e.method?[e.params,e.callback]:"get"===e.method||"remove"===e.method?[e.id,e.params,e.callback]:"update"===e.method||"patch"===e.method?[e.id,e.data,e.params,e.callback]:"create"===e.method?[e.data,e.params,e.callback]:defaultMakeArguments(e)}function convertHookData(e){var t={};return Array.isArray(e)?t={all:e}:"object"!==("undefined"==typeof e?"undefined":_typeof(e))?t={all:[e]}:(0,_utils.each)(e,function(e,a){t[a]=Array.isArray(e)?e:[e]}),t}Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},_utils=require("./utils"),converters={find:function(e){return{params:e[0],callback:e[1]}},create:function(e){return{data:e[0],params:e[1],callback:e[2]}},get:getOrRemove,remove:getOrRemove,update:updateOrPatch,patch:updateOrPatch};exports.default={hookObject:hookObject,hook:hookObject,converters:converters,defaultMakeArguments:defaultMakeArguments,makeArguments:makeArguments,convertHookData:convertHookData},module.exports=exports.default;

},{"./utils":21}],21:[function(require,module,exports){
"use strict";function _toConsumableArray(r){if(Array.isArray(r)){for(var n=0,t=Array(r.length);n<r.length;n++)t[n]=r[n];return t}return Array.from(r)}function stripSlashes(r){return r.replace(/^(\/*)|(\/*)$/g,"")}function each(r,n){r&&"function"==typeof r.forEach?r.forEach(n):"object"===("undefined"==typeof r?"undefined":_typeof(r))&&Object.keys(r).forEach(function(t){return n(r[t],t)})}function matcher(r){var n=_.omit(r,"$limit","$skip","$sort");return function(r){return!(!n.$or||!_.some(n.$or,function(n){return matcher(n)(r)}))||_.every(n,function(t,e){return"object"===("undefined"==typeof t?"undefined":_typeof(t))?_.every(t,function(n,t){if(specialFilters[t]){var o=specialFilters[t](e,n);return o(r)}return!1}):"undefined"!=typeof r[e]&&r[e]===n[e]})}}function sorter(r){return function(n,t){var e=0;return each(r,function(r,o){r=parseInt(r,10),n[o]<t[o]&&(e-=1*r),n[o]>t[o]&&(e+=1*r)}),e}}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(r){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(r[e]=t[e])}return r},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol?"symbol":typeof r};exports.stripSlashes=stripSlashes,exports.each=each,exports.matcher=matcher,exports.sorter=sorter;var _=exports._={some:function(r,n){return Object.keys(r).map(function(n){return[r[n],n]}).some(function(r){return n.apply(void 0,_toConsumableArray(r))})},every:function(r,n){return Object.keys(r).map(function(n){return[r[n],n]}).every(function(r){return n.apply(void 0,_toConsumableArray(r))})},isMatch:function(r,n){return Object.keys(n).every(function(t){return r[t]===n[t]})},omit:function(r){for(var n=_extends({},r),t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return e.forEach(function(r){return delete n[r]}),n}},specialFilters=exports.specialFilters={$in:function(r,n){return function(t){return n.indexOf(t[r])!==-1}},$nin:function(r,n){return function(t){return n.indexOf(t[r])===-1}},$lt:function(r,n){return function(t){return t[r]<n}},$lte:function(r,n){return function(t){return t[r]<=n}},$gt:function(r,n){return function(t){return t[r]>n}},$gte:function(r,n){return function(t){return t[r]>=n}},$ne:function(r,n){return function(t){return t[r]!==n}}};

},{}],22:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function _extendableBuiltin(e){function t(){var t=Reflect.construct(e,Array.from(arguments));return Object.setPrototypeOf(t,Object.getPrototypeOf(this)),t}return t.prototype=Object.create(e.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e,t}function convert(e){if(!e)return e;var t=errors[e.name],r=t?new t(e.message,e.data):new Error(e.message||e);return"object"===("undefined"==typeof e?"undefined":_typeof(e))&&_extends(r,e),r}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),debug=require("debug")("feathers-errors"),FeathersError=function(e){function t(e,r,o,n,s){_classCallCheck(this,t),e=e||"Error";var i=void 0,c=void 0,a=void 0;e instanceof Error?(c=e.message||"Error",e.errors&&(i=e.errors)):"object"===("undefined"==typeof e?"undefined":_typeof(e))?(c=e.message||"Error",s=e):c=e,s&&(a=_extends({},s),a.errors&&(i=a.errors,delete a.errors));var l=_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,c));return l.type="FeathersError",l.name=r,l.message=c,l.code=o,l.className=n,l.data=a,l.errors=i||{},debug(l.name+"("+l.code+"): "+l.message),l}return _inherits(t,e),_createClass(t,[{key:"toJSON",value:function(){return{name:this.name,message:this.message,code:this.code,className:this.className,data:this.data,errors:this.errors}}}]),t}(_extendableBuiltin(Error)),BadRequest=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"BadRequest",400,"bad-request",r))}return _inherits(t,e),t}(FeathersError),NotAuthenticated=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"NotAuthenticated",401,"not-authenticated",r))}return _inherits(t,e),t}(FeathersError),PaymentError=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"PaymentError",402,"payment-error",r))}return _inherits(t,e),t}(FeathersError),Forbidden=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"Forbidden",403,"forbidden",r))}return _inherits(t,e),t}(FeathersError),NotFound=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"NotFound",404,"not-found",r))}return _inherits(t,e),t}(FeathersError),MethodNotAllowed=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"MethodNotAllowed",405,"method-not-allowed",r))}return _inherits(t,e),t}(FeathersError),NotAcceptable=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"NotAcceptable",406,"not-acceptable",r))}return _inherits(t,e),t}(FeathersError),Timeout=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"Timeout",408,"timeout",r))}return _inherits(t,e),t}(FeathersError),Conflict=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"Conflict",409,"conflict",r))}return _inherits(t,e),t}(FeathersError),Unprocessable=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"Unprocessable",422,"unprocessable",r))}return _inherits(t,e),t}(FeathersError),GeneralError=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"GeneralError",500,"general-error",r))}return _inherits(t,e),t}(FeathersError),NotImplemented=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"NotImplemented",501,"not-implemented",r))}return _inherits(t,e),t}(FeathersError),Unavailable=function(e){function t(e,r){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).call(this,e,"Unavailable",503,"unavailable",r))}return _inherits(t,e),t}(FeathersError),errors={FeathersError:FeathersError,BadRequest:BadRequest,NotAuthenticated:NotAuthenticated,PaymentError:PaymentError,Forbidden:Forbidden,NotFound:NotFound,MethodNotAllowed:MethodNotAllowed,NotAcceptable:NotAcceptable,Timeout:Timeout,Conflict:Conflict,Unprocessable:Unprocessable,GeneralError:GeneralError,NotImplemented:NotImplemented,Unavailable:Unavailable,400:BadRequest,401:NotAuthenticated,402:PaymentError,403:Forbidden,404:NotFound,405:MethodNotAllowed,406:NotAcceptable,408:Timeout,409:Conflict,422:Unprocessable,500:GeneralError,501:NotImplemented,503:Unavailable};exports.default=_extends({convert:convert,types:errors,errors:errors},errors),module.exports=exports.default;

},{"debug":9}],23:[function(require,module,exports){
"use strict";function lowerCase(){for(var r=arguments.length,e=Array(r),t=0;t<r;t++)e[t]=arguments[t];var n=function(r){var t=!0,n=!1,o=void 0;try{for(var a,i=e[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var f=a.value;if(r[f]){if("string"!=typeof r[f])throw new errors.BadRequest("Expected string");r[f]=r[f].toLowerCase()}}}catch(r){n=!0,o=r}finally{try{!t&&i.return&&i.return()}finally{if(n)throw o}}},o="function"==typeof e[e.length-1]?e.pop():function(){return!0};return function(r){var e="before"===r.type?r.data:r.result,t=function(t){return e&&t&&("find"===r.method||Array.isArray(e)?(e.data||e).forEach(n):n(e)),r},a=o(r);return a&&"function"==typeof a.then?a.then(t):t(a)}}function removeQuery(){for(var r=arguments.length,e=Array(r),t=0;t<r;t++)e[t]=arguments[t];var n=function(r){var t=!0,n=!1,o=void 0;try{for(var a,i=e[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var f=a.value;r[f]=void 0,delete r[f]}}catch(r){n=!0,o=r}finally{try{!t&&i.return&&i.return()}finally{if(n)throw o}}},o="function"==typeof e[e.length-1]?e.pop():function(){return!0};return function(r){if("after"===r.type)throw new errors.GeneralError("Provider '"+r.params.provider+"' can not remove query params on after hook.");var e=r.params.query,t=function(t){return e&&t&&n(e),r},a=o(r);return a&&"function"==typeof a.then?a.then(t):t(a)}}function pluckQuery(){for(var r=arguments.length,e=Array(r),t=0;t<r;t++)e[t]=arguments[t];var n=function(r){var t=!0,n=!1,o=void 0;try{for(var a,i=Object.keys(r)[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var f=a.value;e.indexOf(f)===-1&&(r[f]=void 0,delete r[f])}}catch(r){n=!0,o=r}finally{try{!t&&i.return&&i.return()}finally{if(n)throw o}}},o="function"==typeof e[e.length-1]?e.pop():function(){return!0};return function(r){if("after"===r.type)throw new errors.GeneralError("Provider '"+r.params.provider+"' can not pluck query params on after hook.");var e=r.params.query,t=function(t){return e&&t&&n(e),r},a=o(r);return a&&"function"==typeof a.then?a.then(t):t(a)}}function removeField(r,e){for(var t=e.split("."),n=t[t.length-1],o=0;r&&o<t.length-1;o++)r=r[t[o]];r&&(r[n]=void 0,delete r[n])}function remove(){for(var r=arguments.length,e=Array(r),t=0;t<r;t++)e[t]=arguments[t];var n=function(r){var t=!0,n=!1,o=void 0;try{for(var a,i=e[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var f=a.value;removeField(r,f)}}catch(r){n=!0,o=r}finally{try{!t&&i.return&&i.return()}finally{if(n)throw o}}},o="function"==typeof e[e.length-1]?e.pop():function(r){return!!r.params.provider};return function(r){var e="before"===r.type?r.data:r.result;Array.isArray(e)?e.forEach(function(r,e,t){"function"==typeof r.toObject?t[e]=r.toObject():"function"==typeof r.toJSON&&(t[e]=r.toJSON())}):"function"==typeof e.toObject?e=e.toObject():"function"==typeof e.toJSON&&(e=e.toJSON());var t=function(t){return e&&t&&(Array.isArray(e)?e.forEach(n):(n(e),e.data&&(Array.isArray(e.data)?e.data.forEach(n):n(e.data)))),"before"===r.type?r.data=e:r.result=e,r},a=o(r);return a&&"function"==typeof a.then?a.then(t):t(a)}}function pluck(){for(var r=arguments.length,e=Array(r),t=0;t<r;t++)e[t]=arguments[t];var n=function(r){var t=!0,n=!1,o=void 0;try{for(var a,i=Object.keys(r)[Symbol.iterator]();!(t=(a=i.next()).done);t=!0){var f=a.value;e.indexOf(f)===-1&&(r[f]=void 0,delete r[f])}}catch(r){n=!0,o=r}finally{try{!t&&i.return&&i.return()}finally{if(n)throw o}}},o="function"==typeof e[e.length-1]?e.pop():function(r){return!!r.params.provider};return function(r){var e="before"===r.type?r.data:r.result,t=function(t){return e&&t&&("find"===r.method||Array.isArray(e)?(e.data||e).forEach(n):n(e)),r},a=o(r);return a&&"function"==typeof a.then?a.then(t):t(a)}}function disable(r){var e=arguments;if(!r)return function(r){throw new errors.MethodNotAllowed("Calling '"+r.method+"' not allowed.")};if("function"==typeof r)return function(e){var t=r(e),n=function(r){if(!r)throw new errors.MethodNotAllowed("Calling '"+e.method+"' not allowed.")};return t&&"function"==typeof t.then?t.then(n):void n(t)};var t,n,o,a=function(){for(t=e.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=e[o];var a=[r].concat(n);return{v:function(e){var t=e.params.provider;if("external"===r&&t||a.indexOf(t)!==-1)throw new errors.MethodNotAllowed("Provider '"+e.params.provider+"' can not call '"+e.method+"'")}}}();return"object"===("undefined"==typeof a?"undefined":_typeof(a))?a.v:void 0}function populate(r,e){if(e=Object.assign({},e),!e.service)throw new Error("You need to provide a service");var t=e.field||r;return function(n){function o(o){if(!o[t])return Promise.resolve(o);var a=o[t];"function"==typeof o.toObject?o=o.toObject(e):"function"==typeof o.toJSON&&(o=o.toJSON(e));var i=Object.assign({},i,{query:void 0}),f=Array.isArray(a)?Promise.all(a.map(function(r){return n.app.service(e.service).get(r,i)})):n.app.service(e.service).get(a,i);return f.then(function(e){return e&&(o[r]=e),o})}if("after"===n.type){var a=function(){var r="find"===n.method&&n.result.data,e=r?n.result.data:n.result;return Array.isArray(e)?{v:Promise.all(e.map(o)).then(function(e){return r?n.result.data=e:n.result=e,n})}:{v:o(n.result).then(function(r){return n.result=r,n})}}();if("object"===("undefined"==typeof a?"undefined":_typeof(a)))return a.v}}}Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol?"symbol":typeof r};exports.lowerCase=lowerCase,exports.removeQuery=removeQuery,exports.pluckQuery=pluckQuery,exports.remove=remove,exports.pluck=pluck,exports.disable=disable,exports.populate=populate;var errors=require("feathers-errors").errors;

},{"feathers-errors":22}],24:[function(require,module,exports){
"use strict";function _defineProperty(o,e,t){return e in o?Object.defineProperty(o,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):o[e]=t,o}function isHookObject(o){return"object"===("undefined"==typeof o?"undefined":_typeof(o))&&"string"==typeof o.method&&("before"===o.type||"after"===o.type)}function processHooks(o,e){var t=this,n=e,r=function(o){if(o){if(!isHookObject(o))throw new Error(n.type+" hook for '"+n.method+"' method returned invalid hook object");n=o}return n},f=Promise.resolve(n);return o.forEach(function(o){var e=o.bind(t);f=2===e.length?f.then(function(o){return new Promise(function(t,n){e(o,function(o,e){return o?n(o):t(e)})})}):f.then(e),f=f.then(r)}),f.catch(function(o){throw o.hook=n,o})}function addHookMethod(o,e,t){var n="__"+e+"Hooks";o[n]={},t.forEach(function(e){"function"==typeof o[e]&&(o[n][e]=[])}),o.mixin(_defineProperty({},e,function(o){var e=this,r=_feathersCommons.hooks.convertHookData(o);return t.forEach(function(o){if("function"==typeof e[o]){var t=e[n][o];r.all&&t.push.apply(t,r.all),r[o]&&t.push.apply(t,r[o])}}),this}))}Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol?"symbol":typeof o};exports.isHookObject=isHookObject,exports.processHooks=processHooks,exports.addHookMethod=addHookMethod;var _feathersCommons=require("feathers-commons");

},{"feathers-commons":19}],25:[function(require,module,exports){
"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var o={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(o[r]=e[r]);return o.default=e,o}function _toConsumableArray(e){if(Array.isArray(e)){for(var o=0,r=Array(e.length);o<e.length;o++)r[o]=e[o];return r}return Array.from(e)}function isPromise(e){return"undefined"!=typeof e&&"function"==typeof e.then}function hookMixin(e){if("function"==typeof e.mixin){var o=this,r=o.methods,n=e.before,t=e.after,i={};(0,_commons.addHookMethod)(e,"before",r),(0,_commons.addHookMethod)(e,"after",r),r.forEach(function(r){"function"==typeof e[r]&&(i[r]=function(){var e=this._super.bind(this),n=_feathersCommons.hooks.hookObject(r,"before",arguments);return n.app=o,_commons.processHooks.call(this,this.__beforeHooks[r],n).then(function(o){return"undefined"!=typeof o.result?Promise.resolve(o):new Promise(function(r,n){var t=_feathersCommons.hooks.makeArguments(o),i=function(e,t){e?n(e):(o.result=t,r(o))};t.splice(t.length-1,1,i);var u=e.apply(void 0,_toConsumableArray(t));isPromise(u)&&u.then(function(e){return i(null,e)},i)})}).then(function(e){return Object.assign({},e,{type:"after"})}).then(_commons.processHooks.bind(this,this.__afterHooks[r])).then(function(e){return e.result})})}),e.mixin(i),n&&e.before(n),t&&e.after(t)}}function configure(){return function(){this.mixins.unshift(hookMixin)}}Object.defineProperty(exports,"__esModule",{value:!0});var _feathersCommons=require("feathers-commons"),_bundled=require("./bundled"),hooks=_interopRequireWildcard(_bundled),_commons=require("./commons");configure.removeQuery=hooks.removeQuery,configure.pluckQuery=hooks.pluckQuery,configure.lowerCase=hooks.lowerCase,configure.remove=hooks.remove,configure.pluck=hooks.pluck,configure.disable=hooks.disable,configure.populate=hooks.populate,exports.default=configure,module.exports=exports.default;

},{"./bundled":23,"./commons":24,"feathers-commons":19}],26:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"./lib/client/index":29,"dup":14}],27:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function toError(e){throw(0,_feathersErrors.convert)(e)}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},_createClass=function(){function e(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(r,t,n){return t&&e(r.prototype,t),n&&e(r,n),r}}(),_qs=require("qs"),_qs2=_interopRequireDefault(_qs),_feathersCommons=require("feathers-commons"),_feathersErrors=require("feathers-errors"),Base=function(){function e(r){_classCallCheck(this,e),this.name=(0,_feathersCommons.stripSlashes)(r.name),this.options=r.options,this.connection=r.connection,this.base=r.base+"/"+this.name}return _createClass(e,[{key:"makeUrl",value:function(e,r){e=e||{};var t=this.base;if("undefined"!=typeof r&&null!==r&&(t+="/"+r),0!==Object.keys(e).length){var n=_qs2.default.stringify(e);t+="?"+n}return t}},{key:"find",value:function(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];return this.request({url:this.makeUrl(e.query),method:"GET",headers:_extends({},e.headers)}).catch(toError)}},{key:"get",value:function(e){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return this.request({url:this.makeUrl(r.query,e),method:"GET",headers:_extends({},r.headers)}).catch(toError)}},{key:"create",value:function(e){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return this.request({url:this.makeUrl(r.query),body:e,method:"POST",headers:_extends({"Content-Type":"application/json"},r.headers)}).catch(toError)}},{key:"update",value:function(e,r){var t=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];return this.request({url:this.makeUrl(t.query,e),body:r,method:"PUT",headers:_extends({"Content-Type":"application/json"},t.headers)}).catch(toError)}},{key:"patch",value:function(e,r){var t=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];return this.request({url:this.makeUrl(t.query,e),body:r,method:"PATCH",headers:_extends({"Content-Type":"application/json"},t.headers)}).catch(toError)}},{key:"remove",value:function(e){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return this.request({url:this.makeUrl(r.query,e),method:"DELETE",headers:_extends({},r.headers)}).catch(toError)}}]),e}();exports.default=Base,module.exports=exports.default;

},{"feathers-commons":19,"feathers-errors":22,"qs":33}],28:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_base=require("./base"),_base2=_interopRequireDefault(_base),Service=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"request",value:function(e){var t=_extends({},e);t.headers=_extends({Accept:"application/json"},this.options.headers,t.headers),e.body&&(t.body=JSON.stringify(e.body));var r=this.connection;return r(e.url,t).then(this.checkStatus).then(function(e){return e.json()})}},{key:"checkStatus",value:function(e){return e.ok?e:e.json().then(function(t){throw t.response=e,t})}}]),t}(_base2.default);exports.default=Service,module.exports=exports.default;

},{"./base":27}],29:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(){var e=arguments.length<=0||void 0===arguments[0]?"":arguments[0],r={};return Object.keys(transports).forEach(function(t){var u=transports[t];r[t]=function(r){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];if(!r)throw new Error(t+" has to be provided to feathers-rest");var o=function(t){return new u({base:e,name:t,connection:r,options:n})},i=function(){if("function"==typeof this.defaultService)throw new Error("Only one default client provider can be configured");this.rest=r,this.defaultService=o};return i.Service=u,i.service=o,i}}),r};var _jquery=require("./jquery"),_jquery2=_interopRequireDefault(_jquery),_superagent=require("./superagent"),_superagent2=_interopRequireDefault(_superagent),_request=require("./request"),_request2=_interopRequireDefault(_request),_fetch=require("./fetch"),_fetch2=_interopRequireDefault(_fetch),transports={jquery:_jquery2.default,superagent:_superagent2.default,request:_request2.default,fetch:_fetch2.default};module.exports=exports.default;

},{"./fetch":28,"./jquery":30,"./request":31,"./superagent":32}],30:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_base=require("./base"),_base2=_interopRequireDefault(_base),Service=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"request",value:function(e){var t=this,r=_extends({dataType:e.type||"json"},{headers:this.options.headers||{}},e);return e.body&&(r.data=JSON.stringify(e.body),r.contentType="application/json"),delete r.type,delete r.body,new Promise(function(e,n){t.connection.ajax(r).then(e,function(e){var t=e.responseText;try{t=JSON.parse(t)}catch(r){t=new Error(e.responseText)}t.xhr=t.response=e,n(t)})})}}]),t}(_base2.default);exports.default=Service,module.exports=exports.default;

},{"./base":27}],31:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_base=require("./base"),_base2=_interopRequireDefault(_base),Service=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"request",value:function(e){var t=this;return new Promise(function(r,n){t.connection(_extends({json:!0},e),function(e,t,o){return e?n(e):!e&&t.statusCode>=400?"string"==typeof o?n(new Error(o)):(o.response=t,n(_extends(new Error(o.message),o))):void r(o)})})}}]),t}(_base2.default);exports.default=Service,module.exports=exports.default;

},{"./base":27}],32:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_base=require("./base"),_base2=_interopRequireDefault(_base),Service=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"request",value:function(e){var t=this.connection(e.method,e.url).set(this.options.headers||{}).set("Accept","application/json").set(e.headers||{}).type(e.type||"json");return new Promise(function(r,n){t.set(e.headers),e.body&&t.send(e.body),t.end(function(e,t){if(e){try{var o=e.response;e=JSON.parse(e.response.text),e.response=o}catch(e){}return n(e)}r(t&&t.body)})})}}]),t}(_base2.default);exports.default=Service,module.exports=exports.default;

},{"./base":27}],33:[function(require,module,exports){
"use strict";var Stringify=require("./stringify"),Parse=require("./parse");module.exports={stringify:Stringify,parse:Parse};

},{"./parse":34,"./stringify":35}],34:[function(require,module,exports){
"use strict";var Utils=require("./utils"),has=Object.prototype.hasOwnProperty,defaults={delimiter:"&",depth:5,arrayLimit:20,parameterLimit:1e3,strictNullHandling:!1,plainObjects:!1,allowPrototypes:!1,allowDots:!1,decoder:Utils.decode},parseValues=function(e,t){for(var r={},l=e.split(t.delimiter,t.parameterLimit===1/0?void 0:t.parameterLimit),a=0;a<l.length;++a){var i,o,s=l[a],n=s.indexOf("]=")===-1?s.indexOf("="):s.indexOf("]=")+1;n===-1?(i=t.decoder(s),o=t.strictNullHandling?null:""):(i=t.decoder(s.slice(0,n)),o=t.decoder(s.slice(n+1))),has.call(r,i)?r[i]=[].concat(r[i]).concat(o):r[i]=o}return r},parseObject=function e(t,r,l){if(!t.length)return r;var a,i=t.shift();if("[]"===i)a=[],a=a.concat(e(t,r,l));else{a=l.plainObjects?Object.create(null):{};var o="["===i[0]&&"]"===i[i.length-1]?i.slice(1,i.length-1):i,s=parseInt(o,10);!isNaN(s)&&i!==o&&String(s)===o&&s>=0&&l.parseArrays&&s<=l.arrayLimit?(a=[],a[s]=e(t,r,l)):a[o]=e(t,r,l)}return a},parseKeys=function(e,t,r){if(e){var l=r.allowDots?e.replace(/\.([^\.\[]+)/g,"[$1]"):e,a=/^([^\[\]]*)/,i=/(\[[^\[\]]*\])/g,o=a.exec(l),s=[];if(o[1]){if(!r.plainObjects&&has.call(Object.prototype,o[1])&&!r.allowPrototypes)return;s.push(o[1])}for(var n=0;null!==(o=i.exec(l))&&n<r.depth;)n+=1,(r.plainObjects||!has.call(Object.prototype,o[1].replace(/\[|\]/g,""))||r.allowPrototypes)&&s.push(o[1]);return o&&s.push("["+l.slice(o.index)+"]"),parseObject(s,t,r)}};module.exports=function(e,t){var r=t||{};if(null!==r.decoder&&void 0!==r.decoder&&"function"!=typeof r.decoder)throw new TypeError("Decoder has to be a function.");if(r.delimiter="string"==typeof r.delimiter||Utils.isRegExp(r.delimiter)?r.delimiter:defaults.delimiter,r.depth="number"==typeof r.depth?r.depth:defaults.depth,r.arrayLimit="number"==typeof r.arrayLimit?r.arrayLimit:defaults.arrayLimit,r.parseArrays=r.parseArrays!==!1,r.decoder="function"==typeof r.decoder?r.decoder:defaults.decoder,r.allowDots="boolean"==typeof r.allowDots?r.allowDots:defaults.allowDots,r.plainObjects="boolean"==typeof r.plainObjects?r.plainObjects:defaults.plainObjects,r.allowPrototypes="boolean"==typeof r.allowPrototypes?r.allowPrototypes:defaults.allowPrototypes,r.parameterLimit="number"==typeof r.parameterLimit?r.parameterLimit:defaults.parameterLimit,r.strictNullHandling="boolean"==typeof r.strictNullHandling?r.strictNullHandling:defaults.strictNullHandling,""===e||null===e||"undefined"==typeof e)return r.plainObjects?Object.create(null):{};for(var l="string"==typeof e?parseValues(e,r):e,a=r.plainObjects?Object.create(null):{},i=Object.keys(l),o=0;o<i.length;++o){var s=i[o],n=parseKeys(s,l[s],r);a=Utils.merge(a,n,r)}return Utils.compact(a)};

},{"./utils":36}],35:[function(require,module,exports){
"use strict";var Utils=require("./utils"),arrayPrefixGenerators={brackets:function(e){return e+"[]"},indices:function(e,r){return e+"["+r+"]"},repeat:function(e){return e}},defaults={delimiter:"&",strictNullHandling:!1,skipNulls:!1,encode:!0,encoder:Utils.encode},stringify=function e(r,t,n,i,o,l,a,f,s){var u=r;if("function"==typeof a)u=a(t,u);else if(u instanceof Date)u=u.toISOString();else if(null===u){if(i)return l?l(t):t;u=""}if("string"==typeof u||"number"==typeof u||"boolean"==typeof u||Utils.isBuffer(u))return l?[l(t)+"="+l(u)]:[t+"="+String(u)];var c=[];if("undefined"==typeof u)return c;var d;if(Array.isArray(a))d=a;else{var y=Object.keys(u);d=f?y.sort(f):y}for(var p=0;p<d.length;++p){var v=d[p];o&&null===u[v]||(c=Array.isArray(u)?c.concat(e(u[v],n(t,v),n,i,o,l,a,f,s)):c.concat(e(u[v],t+(s?"."+v:"["+v+"]"),n,i,o,l,a,f,s)))}return c};module.exports=function(e,r){var t,n,i=e,o=r||{},l="undefined"==typeof o.delimiter?defaults.delimiter:o.delimiter,a="boolean"==typeof o.strictNullHandling?o.strictNullHandling:defaults.strictNullHandling,f="boolean"==typeof o.skipNulls?o.skipNulls:defaults.skipNulls,s="boolean"==typeof o.encode?o.encode:defaults.encode,u=s?"function"==typeof o.encoder?o.encoder:defaults.encoder:null,c="function"==typeof o.sort?o.sort:null,d="undefined"!=typeof o.allowDots&&o.allowDots;if(null!==o.encoder&&void 0!==o.encoder&&"function"!=typeof o.encoder)throw new TypeError("Encoder has to be a function.");"function"==typeof o.filter?(n=o.filter,i=n("",i)):Array.isArray(o.filter)&&(t=n=o.filter);var y=[];if("object"!=typeof i||null===i)return"";var p;p=o.arrayFormat in arrayPrefixGenerators?o.arrayFormat:"indices"in o?o.indices?"indices":"repeat":"indices";var v=arrayPrefixGenerators[p];t||(t=Object.keys(i)),c&&t.sort(c);for(var g=0;g<t.length;++g){var b=t[g];f&&null===i[b]||(y=y.concat(stringify(i[b],b,v,a,f,u,n,c,d)))}return y.join(l)};

},{"./utils":36}],36:[function(require,module,exports){
"use strict";var hexTable=function(){for(var e=new Array(256),r=0;r<256;++r)e[r]="%"+((r<16?"0":"")+r.toString(16)).toUpperCase();return e}();exports.arrayToObject=function(e,r){for(var t=r.plainObjects?Object.create(null):{},o=0;o<e.length;++o)"undefined"!=typeof e[o]&&(t[o]=e[o]);return t},exports.merge=function(e,r,t){if(!r)return e;if("object"!=typeof r){if(Array.isArray(e))e.push(r);else{if("object"!=typeof e)return[e,r];e[r]=!0}return e}if("object"!=typeof e)return[e].concat(r);var o=e;return Array.isArray(e)&&!Array.isArray(r)&&(o=exports.arrayToObject(e,t)),Object.keys(r).reduce(function(e,o){var n=r[o];return Object.prototype.hasOwnProperty.call(e,o)?e[o]=exports.merge(e[o],n,t):e[o]=n,e},o)},exports.decode=function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(r){return e}},exports.encode=function(e){if(0===e.length)return e;for(var r="string"==typeof e?e:String(e),t="",o=0;o<r.length;++o){var n=r.charCodeAt(o);45===n||46===n||95===n||126===n||n>=48&&n<=57||n>=65&&n<=90||n>=97&&n<=122?t+=r.charAt(o):n<128?t+=hexTable[n]:n<2048?t+=hexTable[192|n>>6]+hexTable[128|63&n]:n<55296||n>=57344?t+=hexTable[224|n>>12]+hexTable[128|n>>6&63]+hexTable[128|63&n]:(o+=1,n=65536+((1023&n)<<10|1023&r.charCodeAt(o)),t+=hexTable[240|n>>18]+hexTable[128|n>>12&63]+hexTable[128|n>>6&63]+hexTable[128|63&n])}return t},exports.compact=function(e,r){if("object"!=typeof e||null===e)return e;var t=r||[],o=t.indexOf(e);if(o!==-1)return t[o];if(t.push(e),Array.isArray(e)){for(var n=[],c=0;c<e.length;++c)e[c]&&"object"==typeof e[c]?n.push(exports.compact(e[c],t)):"undefined"!=typeof e[c]&&n.push(e[c]);return n}for(var a=Object.keys(e),u=0;u<a.length;++u){var f=a[u];e[f]=exports.compact(e[f],t)}return e},exports.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},exports.isBuffer=function(e){return null!==e&&"undefined"!=typeof e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))};

},{}],37:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"./lib/client/index":40,"dup":14}],38:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var _debug=require("debug"),_debug2=_interopRequireDefault(_debug),_feathersCommons=require("feathers-commons"),_uberproto=require("uberproto"),_uberproto2=_interopRequireDefault(_uberproto),_index=require("./mixins/index"),_index2=_interopRequireDefault(_index),debug=(0,_debug2.default)("feathers:application"),methods=["find","get","create","update","patch","remove"],Proto=_uberproto2.default.extend({create:null});exports.default={init:function(){Object.assign(this,{methods:methods,mixins:(0,_index2.default)(),services:{},providers:[],_setup:!1})},service:function(e,t){var r=this,i=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];if(e=(0,_feathersCommons.stripSlashes)(e),!t){var s=this.services[e];return"undefined"==typeof s&&"function"==typeof this.defaultService?this.service(e,this.defaultService(e),i):s}var u=Proto.extend(t);return debug("Registering new service at `"+e+"`"),this.mixins.forEach(function(e){return e.call(r,u)}),"function"==typeof u._setup&&u._setup(this,e),this.providers.forEach(function(t){return t.call(r,e,u,i)}),this._isSetup&&"function"==typeof u.setup&&(debug("Setting up service for `"+e+"`"),u.setup(this,e)),this.services[e]=u},use:function(e){var t=void 0,r=Array.from(arguments).slice(1).reduce(function(e,r){if("function"==typeof r)e[t?"after":"before"].push(r);else{if(t)throw new Error("invalid arg passed to app.use");t=r}return e},{before:[],after:[]}),i=function(e){return e.some(function(e){return t&&"function"==typeof t[e]})};return i(["handle","set"])||!i(this.methods.concat("setup"))?this._super.apply(this,arguments):(this.service(e,t,{middleware:r}),this)},setup:function(){var e=this;return Object.keys(this.services).forEach(function(t){var r=e.services[t];debug("Setting up service for `"+t+"`"),"function"==typeof r.setup&&r.setup(e,t)}),this._isSetup=!0,this},configure:function(e){return e.call(this),this},listen:function(){var e=this._super.apply(this,arguments);return this.setup(e),debug("Feathers application listening"),e}},module.exports=exports.default;

},{"./mixins/index":43,"debug":9,"feathers-commons":19,"uberproto":130}],39:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(){var e={settings:{},get:function(e){return this.settings[e]},set:function(e,t){return this.settings[e]=t,this},disable:function(e){return this.settings[e]=!1,this},disabled:function(e){return!this.settings[e]},enable:function(e){return this.settings[e]=!0,this},enabled:function(e){return!!this.settings[e]},use:function(){throw new Error("Middleware functions can not be used in the Feathers client")},listen:function(){return{}}};return _uberproto2.default.mixin(_events.EventEmitter.prototype,e),e};var _events=require("events"),_uberproto=require("uberproto"),_uberproto2=_interopRequireDefault(_uberproto);module.exports=exports.default;

},{"events":13,"uberproto":130}],40:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function createApplication(){return(0,_feathers2.default)(_express2.default.apply(void 0,arguments))}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=createApplication;var _feathers=require("../feathers"),_feathers2=_interopRequireDefault(_feathers),_express=require("./express"),_express2=_interopRequireDefault(_express);createApplication.version="2.0.1",module.exports=exports.default;

},{"../feathers":41,"./express":39}],41:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function createApplication(e){return _uberproto2.default.mixin(_application2.default,e),e.init(),e}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=createApplication;var _uberproto=require("uberproto"),_uberproto2=_interopRequireDefault(_uberproto),_application=require("./application"),_application2=_interopRequireDefault(_application);module.exports=exports.default;

},{"./application":38,"uberproto":130}],42:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function upperCase(e){return e.charAt(0).toUpperCase()+e.substring(1)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(e){var r="function"==typeof e.on&&"function"==typeof e.emit,t=e._rubberDuck=_rubberduck2.default.emitter(e);"function"!=typeof e.mixin||r||e.mixin(_events.EventEmitter.prototype),e._serviceEvents=Array.isArray(e.events)?e.events.slice():[],t.on("error",function(r){e.emit("serviceError",r[0])}),Object.keys(eventMappings).forEach(function(r){var n=eventMappings[r],o=e._serviceEvents.indexOf(n)!==-1;if("function"==typeof e[r]&&!o){var u="after"+upperCase(r);e._serviceEvents.push(n),t.punch(r,-1),t.on(u,function(t,o){t[0]?e.emit("serviceError",t[0]):!function(){var u=hookObject(r,"after",o),i=Array.isArray(t[1])?t[1]:[t[1]];i.forEach(function(r){return e.emit(n,r,u)})}()})}})};var _rubberduck=require("rubberduck"),_rubberduck2=_interopRequireDefault(_rubberduck),_events=require("events"),_feathersCommons=require("feathers-commons"),hookObject=_feathersCommons.hooks.hookObject,eventMappings={create:"created",update:"updated",remove:"removed",patch:"patched"};module.exports=exports.default;

},{"events":13,"feathers-commons":19,"rubberduck":121}],43:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(){var e=[require("./promise"),require("./event"),require("./normalizer")];return e.push=function(){var e=[this.length-1,0].concat(Array.from(arguments));return this.splice.apply(this,e),this.length},e},module.exports=exports.default;

},{"./event":42,"./normalizer":44,"./promise":45}],44:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(e){var t=this;"function"==typeof e.mixin&&!function(){var o={};t.methods.forEach(function(t){"function"==typeof e[t]&&(o[t]=function(){return this._super.apply(this,(0,_feathersCommons.getArguments)(t,arguments))})}),e.mixin(o)}()};var _feathersCommons=require("feathers-commons");module.exports=exports.default;

},{"feathers-commons":19}],45:[function(require,module,exports){
"use strict";function isPromise(t){return"undefined"!=typeof t&&"function"==typeof t.then}function wrapper(){var t=this._super.apply(this,arguments),e=arguments[arguments.length-1];return"function"==typeof e&&isPromise(t)&&t.then(function(t){return e(null,t)},function(t){return e(t)}),t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(t){var e=this;"function"==typeof t.mixin&&!function(){var n={};e.methods.forEach(function(e){"function"==typeof t[e]&&(n[e]=wrapper)}),t.mixin(n)}()},module.exports=exports.default;

},{}],46:[function(require,module,exports){
var defaultGet=function(t,e,n){return e in t?t[e]:n},getIn=module.exports=function t(e,n,r){if(Array.isArray(n)){if(0===n.length)return e;if(!e)return r;n=n.slice();var i,u=n.shift();return i=e.get?e.get.bind(e):defaultGet.bind(null,e),0===n.length?i(u,r):n.length?t(i(u,r),n):void 0}};

},{}],47:[function(require,module,exports){
(function (global){
var topLevel="undefined"!=typeof global?global:"undefined"!=typeof window?window:{},minDoc=require("min-document");if("undefined"!=typeof document)module.exports=document;else{var doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"];doccy||(doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"]=minDoc),module.exports=doccy}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":7}],48:[function(require,module,exports){
(function (global){
"undefined"!=typeof window?module.exports=window:"undefined"!=typeof global?module.exports=global:"undefined"!=typeof self?module.exports=self:module.exports={};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],49:[function(require,module,exports){
function attributeToProperty(r){return function(t,o,e){for(var n in o)n in transform&&(o[transform[n]]=o[n],delete o[n]);return r(t,o,e)}}module.exports=attributeToProperty;var transform={class:"className",for:"htmlFor","http-equiv":"httpEquiv"};

},{}],50:[function(require,module,exports){
function quot(T){return T===ATTR_VALUE_SQ||T===ATTR_VALUE_DQ}function has(T,e){return hasOwn.call(T,e)}function selfClosing(T){return closeRE.test(T)}var attrToProp=require("hyperscript-attribute-to-property"),VAR=0,TEXT=1,OPEN=2,CLOSE=3,ATTR=4,ATTR_KEY=5,ATTR_KEY_W=6,ATTR_VALUE_W=7,ATTR_VALUE=8,ATTR_VALUE_SQ=9,ATTR_VALUE_DQ=10,ATTR_EQ=11,ATTR_BREAK=12;module.exports=function(T,e){function A(T){return"function"==typeof T?T:"string"==typeof T?T:T&&"object"==typeof T?T:t("",T)}T=attrToProp(T),e||(e={});var t=e.concat||function(T,e){return String(T)+String(e)};return function(e){function n(T){var e=[];r===ATTR_VALUE_W&&(r=ATTR);for(var A=0;A<T.length;A++){var t=T.charAt(A);r===TEXT&&"<"===t?(R.length&&e.push([TEXT,R]),R="",r=OPEN):">"!==t||quot(r)?r===TEXT?R+=t:r===OPEN&&/\s/.test(t)?(e.push([OPEN,R]),R="",r=ATTR):r===OPEN?R+=t:r===ATTR&&/[\w-]/.test(t)?(r=ATTR_KEY,R=t):r===ATTR&&/\s/.test(t)?(R.length&&e.push([ATTR_KEY,R]),e.push([ATTR_BREAK])):r===ATTR_KEY&&/\s/.test(t)?(e.push([ATTR_KEY,R]),R="",r=ATTR_KEY_W):r===ATTR_KEY&&"="===t?(e.push([ATTR_KEY,R],[ATTR_EQ]),R="",r=ATTR_VALUE_W):r===ATTR_KEY?R+=t:r!==ATTR_KEY_W&&r!==ATTR||"="!==t?r!==ATTR_KEY_W&&r!==ATTR||/\s/.test(t)?r===ATTR_VALUE_W&&'"'===t?r=ATTR_VALUE_DQ:r===ATTR_VALUE_W&&"'"===t?r=ATTR_VALUE_SQ:r===ATTR_VALUE_DQ&&'"'===t?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r===ATTR_VALUE_SQ&&"'"===t?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r!==ATTR_VALUE_W||/\s/.test(t)?r===ATTR_VALUE&&/\s/.test(t)?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r!==ATTR_VALUE&&r!==ATTR_VALUE_SQ&&r!==ATTR_VALUE_DQ||(R+=t):(r=ATTR_VALUE,A--):(e.push([ATTR_BREAK]),/[\w-]/.test(t)?(R+=t,r=ATTR_KEY):r=ATTR):(e.push([ATTR_EQ]),r=ATTR_VALUE_W):(r===OPEN?e.push([OPEN,R]):r===ATTR_KEY?e.push([ATTR_KEY,R]):r===ATTR_VALUE&&R.length&&e.push([ATTR_VALUE,R]),e.push([CLOSE]),R="",r=TEXT)}return r===TEXT&&R.length?(e.push([TEXT,R]),R=""):r===ATTR_VALUE&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_VALUE_DQ&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_VALUE_SQ&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_KEY&&(e.push([ATTR_KEY,R]),R=""),e}for(var r=TEXT,R="",E=arguments.length,_=[],s=0;s<e.length;s++)if(s<E-1){var o=arguments[s+1],l=n(e[s]),f=r;f===ATTR_VALUE_DQ&&(f=ATTR_VALUE),f===ATTR_VALUE_SQ&&(f=ATTR_VALUE),f===ATTR_VALUE_W&&(f=ATTR_VALUE),f===ATTR&&(f=ATTR_KEY),l.push([VAR,f,o]),_.push.apply(_,l)}else _.push.apply(_,n(e[s]));for(var h=[null,{},[]],i=[[h,-1]],s=0;s<_.length;s++){var a=i[i.length-1][0],l=_[s],p=l[0];if(p===OPEN&&/^\//.test(l[1])){var u=i[i.length-1][1];i.length>1&&(i.pop(),i[i.length-1][0][2][u]=T(a[0],a[1],a[2].length?a[2]:void 0))}else if(p===OPEN){var g=[l[1],{},[]];a[2].push(g),i.push([g,a[2].length-1])}else if(p===ATTR_KEY||p===VAR&&l[1]===ATTR_KEY){for(var L,V="";s<_.length;s++)if(_[s][0]===ATTR_KEY)V=t(V,_[s][1]);else{if(_[s][0]!==VAR||_[s][1]!==ATTR_KEY)break;if("object"!=typeof _[s][2]||V)V=t(V,_[s][2]);else for(L in _[s][2])_[s][2].hasOwnProperty(L)&&!a[1][L]&&(a[1][L]=_[s][2][L])}_[s][0]===ATTR_EQ&&s++;for(var U=s;s<_.length;s++)if(_[s][0]===ATTR_VALUE||_[s][0]===ATTR_KEY)a[1][V]?a[1][V]=t(a[1][V],_[s][1]):a[1][V]=A(_[s][1]);else{if(_[s][0]!==VAR||_[s][1]!==ATTR_VALUE&&_[s][1]!==ATTR_KEY){!V.length||a[1][V]||s!==U||_[s][0]!==CLOSE&&_[s][0]!==ATTR_BREAK||(a[1][V]=V.toLowerCase());break}a[1][V]?a[1][V]=t(a[1][V],_[s][2]):a[1][V]=A(_[s][2])}}else if(p===ATTR_KEY)a[1][l[1]]=!0;else if(p===VAR&&l[1]===ATTR_KEY)a[1][l[2]]=!0;else if(p===CLOSE){if(selfClosing(a[0])&&i.length){var u=i[i.length-1][1];i.pop(),i[i.length-1][0][2][u]=T(a[0],a[1],a[2].length?a[2]:void 0)}}else if(p===VAR&&l[1]===TEXT)void 0===l[2]||null===l[2]?l[2]="":l[2]||(l[2]=t("",l[2])),Array.isArray(l[2][0])?a[2].push.apply(a[2],l[2]):a[2].push(l[2]);else if(p===TEXT)a[2].push(l[1]);else if(p!==ATTR_EQ&&p!==ATTR_BREAK)throw new Error("unhandled: "+p)}if(h[2].length>1&&/^\s*$/.test(h[2][0])&&h[2].shift(),h[2].length>2||2===h[2].length&&/\S/.test(h[2][1]))throw new Error("multiple root elements must be wrapped in an enclosing tag");return Array.isArray(h[2][0])&&"string"==typeof h[2][0][0]&&Array.isArray(h[2][0][2])&&(h[2][0]=T(h[2][0][0],h[2][0][1],h[2][0][2])),h[2][0]}};var hasOwn=Object.prototype.hasOwnProperty,closeRE=RegExp("^("+["area","base","basefont","bgsound","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr","animate","animateTransform","circle","cursor","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","font-face-format","font-face-name","font-face-uri","glyph","glyphRef","hkern","image","line","missing-glyph","mpath","path","polygon","polyline","rect","set","stop","tref","use","view","vkern"].join("|")+")(?:[.#][a-zA-Z0-9-￿_:-]+)*$");

},{"hyperscript-attribute-to-property":49}],51:[function(require,module,exports){
function inuMulti(r){return r.run?extend(r,{run:function(e,n){return Array.isArray(e)?many(e.map(function(e){return r.run(e,n)||empty()})):r.run(e,n)}}):r}var extend=require("xtend"),empty=require("pull-stream/sources/empty"),many=require("pull-many");module.exports=inuMulti;

},{"pull-many":83,"pull-stream/sources/empty":97,"xtend":138}],52:[function(require,module,exports){
function init(){return{model:null}}function update(n){return{model:n}}function view(){return null}function run(){return null}module.exports={init:init,update:update,view:view,run:run};

},{}],53:[function(require,module,exports){
module.exports=require("yo-yo");

},{"yo-yo":140}],54:[function(require,module,exports){
module.exports={defaults:require("./defaults"),start:require("./start"),pull:require("./pull"),html:require("./html")};

},{"./defaults":52,"./html":53,"./pull":55,"./start":56}],55:[function(require,module,exports){
module.exports=require("pull-stream");

},{"pull-stream":86}],56:[function(require,module,exports){
(function (process){
function start(e){function n(e){a(e)}function t(){Object.keys(v).forEach(function(e){v[e].end()})}e=defined(e,{});var i=defined(e.init,defaults.init),r=defined(e.update,defaults.update),u=defined(e.view,defaults.view),l=defined(e.run,defaults.run),a=notify(),f=i.call(e),s=notify();pull(a.listen(),scan(f,function(n,t){return r.call(e,n.model,t)}),drain(s));var o=notify();pull(s.listen(),map(function(e){return e.model}),difference(),drain(o));var c=notify();pull(o.listen(),map(function(t){return u.call(e,t,n)}),filter(isNotNil),drain(c));var d=notify();pull(s.listen(),map(function(e){return e.effect}),filter(isNotNil),drain(d));var p=notify(),v={actions:a,states:s,models:o,views:c,effects:d,effectActionsSources:p},m={};return Object.keys(v).forEach(function(e){var n=v[e].listen;m[e]=["states","models","effects","views"].indexOf(e)!==-1?replayLastValue(n):n}),pull(d.listen(),map(function(n){return l.call(e,n,m)}),filter(isNotNil),drain(p)),pull(p.listen(),drainMany(a)),process.nextTick(function(){s(f)}),Object.assign({},m,{stop:t})}function isNotNil(e){return null!=e}function scan(e,n){return map(function(t){return e=n(e,t)})}function difference(){var e;return filter(function(n){var t=n!==e;return e=n,t})}function drainMany(e){return function(n){pull(n,drain(function(n){pull(n,drain(e))}))}}function replayLastValue(e){var n;return pull(e(),drain(function(e){n=e})),function(){return cat([null==n?void 0:values([n]),e()])}}var defined=require("defined"),pull=require("pull-stream/pull"),values=require("pull-stream/sources/values"),map=require("pull-stream/throughs/map"),filter=require("pull-stream/throughs/filter"),drain=require("pull-stream/sinks/drain"),notify=require("pull-notify"),cat=require("pull-cat"),defaults=require("./defaults");module.exports=start;

}).call(this,require('_process'))

},{"./defaults":52,"_process":80,"defined":11,"pull-cat":82,"pull-notify":84,"pull-stream/pull":87,"pull-stream/sinks/drain":90,"pull-stream/sources/values":103,"pull-stream/throughs/filter":106,"pull-stream/throughs/map":109}],57:[function(require,module,exports){
"use strict";module.exports=require("./event");

},{"./event":62}],58:[function(require,module,exports){
"use strict";function App(r){return Array.isArray(r)||(r=[r]),r.unshift(run),r.push(href),route(combine(r),function(r){return function(e,u){return r(e.href,e,u)}})}var href=require("./href"),run=require("./run").app,route=require("./route"),combine=require("./combine");module.exports=App;

},{"./combine":59,"./href":65,"./route":69,"./run":71}],59:[function(require,module,exports){
"use strict";function _defineProperty(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function combineApps(e){return multi({init:combineInits(e),update:combineUpdates(e),run:combineRuns(e),routes:combineRoutes(e)})}function combineInits(e){return function(){return e.reduce(function(e,n){if(!n.init)return e;var t=n.init(),r=extend(e.model,n.name?_defineProperty({},n.name,t.model):t.model),u=t.effect?e.effect.concat([t.effect]):e.effect;return{model:r,effect:u}},{model:{},effect:[]})}}function combineUpdates(e){var n=e.map(function(e){return e.update?e.name?scopeUpdate(e.update,e.name):e.update:defaults.update});return reduceUpdates(n)}function findTopView(e){var n=e.find(function(e){return!e.name&&e.view});return(n||{}).view}function combineRuns(e){return runMany(e.map(function(e){return e.run}))}function combineRoutes(e){return e.reduce(function(e,n){var t=n.routes;return t?e.concat(t):e},[])}var extend=require("xtend"),getIn=require("get-in"),defaults=require("inu/defaults"),multi=require("inu-multi"),reduceUpdates=require("./reduceUpdates"),runMany=require("./runMany"),scopeUpdate=require("./scopeUpdate");module.exports=combineApps;

},{"./reduceUpdates":68,"./runMany":72,"./scopeUpdate":73,"get-in":46,"inu-multi":51,"inu/defaults":52,"xtend":138}],60:[function(require,module,exports){
"use strict";function Domain(e){return extend(e,{update:"object"===_typeof(e.update)?handleActions(e.update):e.update,run:"object"===_typeof(e.run)?handleEffects(e.run):e.run})}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},extend=require("xtend"),handleActions=require("./handleActions"),handleEffects=require("./handleEffects");module.exports=Domain;

},{"./handleActions":63,"./handleEffects":64,"xtend":138}],61:[function(require,module,exports){
"use strict";module.exports=require("./event");

},{"./event":62}],62:[function(require,module,exports){
"use strict";function Event(t){var n=arguments.length<=1||void 0===arguments[1]?identity:arguments[1];return function(){return{type:t,payload:n.apply(void 0,arguments)}}}function identity(t){return t}module.exports=Event;

},{}],63:[function(require,module,exports){
"use strict";function handleActions(e){var r=keys(e).map(function(r){var n=e[r];return function(e,t){return t.type===r?n(e,t.payload):{model:e}}});return reduceUpdates(r)}var keys=require("own-enumerable-keys"),reduceUpdates=require("./reduceUpdates");module.exports=handleActions;

},{"./reduceUpdates":68,"own-enumerable-keys":77}],64:[function(require,module,exports){
"use strict";function handleEffects(e){var n=keys(e).map(function(n){var r=e[n];return function(e,u){if(e.type===n)return r(e.payload,u)}});return runMany(n)}var keys=require("own-enumerable-keys"),runMany=require("./runMany");module.exports=handleEffects;

},{"./runMany":72,"own-enumerable-keys":77}],65:[function(require,module,exports){
"use strict";function _defineProperty(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}var _run,pull=require("pull-stream"),href=require("sheet-router/href"),history=require("sheet-router/history"),Pushable=require("pull-pushable"),Domain=require("./domain"),Action=require("./action"),Effect=require("./effect"),SET=Symbol("set"),INIT=Symbol("init"),GO=Symbol("go"),set=Action(SET),init=Effect(INIT),go=Effect(GO);module.exports=Domain({name:"href",init:function(){return{model:document.location.href,effect:INIT}},update:_defineProperty({},SET,function(e,r){return{model:r}}),run:(_run={},_defineProperty(_run,INIT,function(e,r){function t(e){o.push({type:SET,payload:e})}var o=Pushable(function(e){console.error(e)});return href(t),history(t),o}),_defineProperty(_run,GO,function(e){if(console.log("href",e),e=e.replace(/#.*/,""),window.location.href!==e)return window.history.pushState({},null,e),pull.values([set(e)])}),_run)}),module.exports.go=go;

},{"./action":57,"./domain":60,"./effect":61,"pull-pushable":85,"pull-stream":86,"sheet-router/history":123,"sheet-router/href":124}],66:[function(require,module,exports){
"use strict";module.exports={App:require("./app"),Domain:require("./domain"),Event:require("./event"),Action:require("./action"),Effect:require("./effect"),run:require("./run").run,navigate:require("./navigate"),apps:{run:require("./run").app,href:require("./href")},Router:require("./router"),route:require("./route"),handleActions:require("./handleActions"),handleEffects:require("./handleEffects"),scopeUpdate:require("./scopeUpdate"),reduceUpdates:require("./reduceUpdates"),runMany:require("./runMany")};

},{"./action":57,"./app":58,"./domain":60,"./effect":61,"./event":62,"./handleActions":63,"./handleEffects":64,"./href":65,"./navigate":67,"./reduceUpdates":68,"./route":69,"./router":70,"./run":71,"./runMany":72,"./scopeUpdate":73}],67:[function(require,module,exports){
"use strict";function navigate(r){var e=window.location.href,u=Url.resolve(e,r);return run(go(u))}var Url=require("url"),run=require("./run").run,go=require("./href").go;module.exports=navigate;

},{"./href":65,"./run":71,"url":131}],68:[function(require,module,exports){
"use strict";function reduceUpdates(e){return function(t,f){var c=e.reduce(function(e,t){var c=t(e.model,f),n=c.model,r=null!=c.effect?e.effect.concat(c.effect):e.effect;return{model:n,effect:r}},{model:t,effect:[]});return c.effect=0!==c.effect.length?c.effect:null,c}}module.exports=reduceUpdates;

},{}],69:[function(require,module,exports){
"use strict";function route(e,r){var t=Router(e.routes);return extend(e,{view:r(t)})}var extend=require("xtend"),Router=require("./router");module.exports=route;

},{"./router":70,"xtend":138}],70:[function(require,module,exports){
"use strict";function Router(r){var t=_slicedToArray(r[r.length-1],1),e=t[0];return createRouter(e,function t(e){return r.map(function(r){var n=_slicedToArray(r,3),o=n[0],u=n[1],i=n[2],a=i?t(i):null;return e(o,u,a)})})}var _slicedToArray=function(){function r(r,t){var e=[],n=!0,o=!1,u=void 0;try{for(var i,a=r[Symbol.iterator]();!(n=(i=a.next()).done)&&(e.push(i.value),!t||e.length!==t);n=!0);}catch(r){o=!0,u=r}finally{try{!n&&a.return&&a.return()}finally{if(o)throw u}}return e}return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return r(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),createRouter=require("sheet-router");module.exports=Router;

},{"sheet-router":125}],71:[function(require,module,exports){
"use strict";function _defineProperty(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}var Domain=require("./domain"),Action=require("./action"),RUN=Symbol("run"),run=Action(RUN),app=Domain({update:_defineProperty({},RUN,function(e,r){return{model:e,effect:r}})});module.exports={RUN:RUN,run:run,app:app};

},{"./action":57,"./domain":60}],72:[function(require,module,exports){
"use strict";function runMany(r){return function(u,n){var e=r.map(function(r){return null==r?empty():r(u,n)||empty()});return pullMany(e)}}var empty=require("pull-stream/sources/empty"),pullMany=require("pull-many");module.exports=runMany;

},{"pull-many":83,"pull-stream/sources/empty":97}],73:[function(require,module,exports){
"use strict";function _defineProperty(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function scopeUpdate(e,r){return function(t,n){var o=e(t[r],n),u=extend(t,_defineProperty({},r,o.model));return{model:u,effect:o.effect}}}var extend=require("xtend");module.exports=scopeUpdate;

},{"xtend":138}],74:[function(require,module,exports){
function empty(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function toElement(e){!range&&document.createRange&&(range=document.createRange(),range.selectNode(document.body));var t;return range&&range.createContextualFragment?t=range.createContextualFragment(e):(t=document.createElement("body"),t.innerHTML=e),t.childNodes[0]}function noop(){}function createElementNS(e,t){return t&&t!==XHTML?document.createElementNS(t,e):document.createElement(e)}function morphAttrs(e,t){var n,r,o,a,i,d,l=t.attributes;for(n=l.length-1;n>=0;n--)r=l[n],o=r.name,i=r.value,a=r.namespaceURI,a?(o=r.localName||o,d=e.getAttributeNS(a,o)):d=e.getAttribute(o),d!==i&&(a?e.setAttributeNS(a,o,i):e.setAttribute(o,i));for(l=e.attributes,n=l.length-1;n>=0;n--)r=l[n],r.specified!==!1&&(o=r.name,a=r.namespaceURI,hasAttributeNS(t,a,a?o=r.localName||o:o)||(a?e.removeAttributeNS(a,r.localName):e.removeAttribute(o)))}function moveChildren(e,t){for(var n=e.firstChild;n;){var r=n.nextSibling;t.appendChild(n),n=r}return t}function defaultGetNodeKey(e){return e.id}function morphdom(e,t,n){function r(e,t){var n=c(e);if(n?l[n]=e:t||p(e),e.nodeType===ELEMENT_NODE)for(var o=e.firstChild;o;)r(o,t||n),o=o.nextSibling}function o(e){if(e.nodeType===ELEMENT_NODE)for(var t=e.firstChild;t;)c(t)||(p(t),o(t)),t=t.nextSibling}function a(e,t,n){E(e)!==!1&&(t.removeChild(e),n?c(e)||(p(e),o(e)):r(e))}function i(e,t,n,r){var o=c(t);if(o&&delete l[o],!r){if(m(e,t)===!1)return;if(morphAttrs(e,t),s(e),h(e,t)===!1)return}if("TEXTAREA"!==e.nodeName){var d,E,v,T,A,g=t.firstChild,C=e.firstChild;e:for(;g;){for(v=g.nextSibling,d=c(g);C;){var y=c(C);if(E=C.nextSibling,!n&&y&&(A=u[y]))A.parentNode.replaceChild(C,A),i(C,A,n),C=E;else{var O=C.nodeType;if(O===g.nodeType){var M=!1;if(O===ELEMENT_NODE?(compareNodeNames(C,g)&&(y||d?d===y&&(M=!0):M=!0),M&&i(C,g,n)):O!==TEXT_NODE&&O!=COMMENT_NODE||(M=!0,C.nodeValue=g.nodeValue),M){g=v,C=E;continue e}}a(C,e,n),C=E}}d&&((T=l[d])?compareNodeNames(T,g)?(i(T,g,!0),g=T):(delete l[d],p(T)):u[d]=g),f(g)!==!1&&(e.appendChild(g),N(g)),g.nodeType===ELEMENT_NODE&&(d||g.firstChild)&&b.push(g),g=v,C=E}for(;C;)E=C.nextSibling,a(C,e,n),C=E}var S=specialElHandlers[e.nodeName];S&&S(e,t)}if(n||(n={}),"string"==typeof t)if("#document"===e.nodeName||"HTML"===e.nodeName){var d=t;t=document.createElement("html"),t.innerHTML=d}else t=toElement(t);var l={},u={},c=n.getNodeKey||defaultGetNodeKey,f=n.onBeforeNodeAdded||noop,N=n.onNodeAdded||noop,m=n.onBeforeElUpdated||n.onBeforeMorphEl||noop,s=n.onElUpdated||noop,E=n.onBeforeNodeDiscarded||noop,p=n.onNodeDiscarded||noop,h=n.onBeforeElChildrenUpdated||n.onBeforeMorphElChildren||noop,v=n.childrenOnly===!0,b=[],T=e,A=T.nodeType,g=t.nodeType;if(!v)if(A===ELEMENT_NODE)g===ELEMENT_NODE?compareNodeNames(e,t)||(p(e),T=moveChildren(e,createElementNS(t.nodeName,t.namespaceURI))):T=t;else if(A===TEXT_NODE||A===COMMENT_NODE){if(g===A)return T.nodeValue=t.nodeValue,T;T=t}if(T===t)p(e);else{i(T,t,!1,v);var C=function(e){for(var t=e.firstChild;t;){var n=t.nextSibling,r=c(t);if(r){var o=l[r];if(o&&compareNodeNames(t,o)){if(t.parentNode.replaceChild(o,t),i(o,t,!0),t=n,empty(l))return!1;continue}}t.nodeType===ELEMENT_NODE&&C(t),t=n}};if(!empty(l))e:for(;b.length;){var y=b;b=[];for(var O=0;O<y.length;O++)if(C(y[O])===!1)break e}for(var M in l)if(l.hasOwnProperty(M)){var S=l[M];p(S),o(S)}}return!v&&T!==e&&e.parentNode&&e.parentNode.replaceChild(T,e),T}var range,testEl="undefined"!=typeof document?document.body||document.createElement("div"):{},XHTML="http://www.w3.org/1999/xhtml",ELEMENT_NODE=1,TEXT_NODE=3,COMMENT_NODE=8,hasAttributeNS;hasAttributeNS=testEl.hasAttributeNS?function(e,t,n){return e.hasAttributeNS(t,n)}:testEl.hasAttribute?function(e,t,n){return e.hasAttribute(n)}:function(e,t,n){return!!e.getAttributeNode(n)};var specialElHandlers={OPTION:function(e,t){e.selected=t.selected,e.selected?e.setAttribute("selected",""):e.removeAttribute("selected","")},INPUT:function(e,t){e.checked=t.checked,e.checked?e.setAttribute("checked",""):e.removeAttribute("checked"),e.value!==t.value&&(e.value=t.value),hasAttributeNS(t,null,"value")||e.removeAttribute("value"),e.disabled=t.disabled,e.disabled?e.setAttribute("disabled",""):e.removeAttribute("disabled")},TEXTAREA:function(e,t){var n=t.value;e.value!==n&&(e.value=n),e.firstChild&&(e.firstChild.nodeValue=n)}},compareNodeNames=function(e,t){return e.nodeName===t.nodeName&&e.namespaceURI===t.namespaceURI};module.exports=morphdom;

},{}],75:[function(require,module,exports){
function parse(e){if(e=""+e,!(e.length>1e4)){var a=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(a){var r=parseFloat(a[1]),c=(a[2]||"ms").toLowerCase();switch(c){case"years":case"year":case"yrs":case"yr":case"y":return r*y;case"days":case"day":case"d":return r*d;case"hours":case"hour":case"hrs":case"hr":case"h":return r*h;case"minutes":case"minute":case"mins":case"min":case"m":return r*m;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r}}}}function short(e){return e>=d?Math.round(e/d)+"d":e>=h?Math.round(e/h)+"h":e>=m?Math.round(e/m)+"m":e>=s?Math.round(e/s)+"s":e+"ms"}function long(e){return plural(e,d,"day")||plural(e,h,"hour")||plural(e,m,"minute")||plural(e,s,"second")||e+" ms"}function plural(s,e,a){if(!(s<e))return s<1.5*e?Math.floor(s/e)+" "+a:Math.ceil(s/e)+" "+a+"s"}var s=1e3,m=60*s,h=60*m,d=24*h,y=365.25*d;module.exports=function(s,e){return e=e||{},"string"==typeof s?parse(s):e.long?long(s):short(s)};

},{}],76:[function(require,module,exports){
function turnon(t,e){watch[t][0]&&0===watch[t][2]&&(watch[t][0](e),watch[t][2]=1)}function turnoff(t,e){watch[t][1]&&1===watch[t][2]&&(watch[t][1](e),watch[t][2]=0)}function eachAttr(t,e,a){var r=t.target.getAttribute(KEY_ATTR);return sameOrigin(t.oldValue,r)?void(watch[r]=watch[t.oldValue]):(watch[t.oldValue]&&a(t.oldValue,t.target),void(watch[r]&&e(r,t.target)))}function sameOrigin(t,e){return!(!t||!e)&&watch[t][3]===watch[e][3]}function eachMutation(t,e){for(var a=Object.keys(watch),r=0;r<t.length;r++){if(t[r]&&t[r].getAttribute&&t[r].getAttribute(KEY_ATTR)){var n=t[r].getAttribute(KEY_ATTR);a.forEach(function(a){n===a&&e(a,t[r])})}t[r].childNodes.length>0&&eachMutation(t[r].childNodes,e)}}var document=require("global/document"),window=require("global/window"),watch=Object.create(null),KEY_ID="onloadid"+(new Date%9e6).toString(36),KEY_ATTR="data-"+KEY_ID,INDEX=0;if(window&&window.MutationObserver){var observer=new MutationObserver(function(t){if(!(Object.keys(watch).length<1))for(var e=0;e<t.length;e++)t[e].attributeName!==KEY_ATTR?(eachMutation(t[e].removedNodes,turnoff),eachMutation(t[e].addedNodes,turnon)):eachAttr(t[e],turnon,turnoff)});observer.observe(document.body,{childList:!0,subtree:!0,attributes:!0,attributeOldValue:!0,attributeFilter:[KEY_ATTR]})}module.exports=function t(e,a,r,n){return a=a||function(){},r=r||function(){},e.setAttribute(KEY_ATTR,"o"+INDEX),watch["o"+INDEX]=[a,r,0,n||t.caller],INDEX+=1,e};

},{"global/document":47,"global/window":48}],77:[function(require,module,exports){
function ownEnumerableKeys(e){var r=Object.getOwnPropertyNames(e);return Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(e))),r.filter(function(r){return propIsEnumerable.call(e,r)})}var propIsEnumerable=Object.prototype.propertyIsEnumerable;module.exports=ownEnumerableKeys;

},{}],78:[function(require,module,exports){
(function (process){
function normalizeArray(r,t){for(var e=0,n=r.length-1;n>=0;n--){var s=r[n];"."===s?r.splice(n,1):".."===s?(r.splice(n,1),e++):e&&(r.splice(n,1),e--)}if(t)for(;e--;e)r.unshift("..");return r}function filter(r,t){if(r.filter)return r.filter(t);for(var e=[],n=0;n<r.length;n++)t(r[n],n,r)&&e.push(r[n]);return e}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,splitPath=function(r){return splitPathRe.exec(r).slice(1)};exports.resolve=function(){for(var r="",t=!1,e=arguments.length-1;e>=-1&&!t;e--){var n=e>=0?arguments[e]:process.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");n&&(r=n+"/"+r,t="/"===n.charAt(0))}return r=normalizeArray(filter(r.split("/"),function(r){return!!r}),!t).join("/"),(t?"/":"")+r||"."},exports.normalize=function(r){var t=exports.isAbsolute(r),e="/"===substr(r,-1);return r=normalizeArray(filter(r.split("/"),function(r){return!!r}),!t).join("/"),r||t||(r="."),r&&e&&(r+="/"),(t?"/":"")+r},exports.isAbsolute=function(r){return"/"===r.charAt(0)},exports.join=function(){var r=Array.prototype.slice.call(arguments,0);return exports.normalize(filter(r,function(r,t){if("string"!=typeof r)throw new TypeError("Arguments to path.join must be strings");return r}).join("/"))},exports.relative=function(r,t){function e(r){for(var t=0;t<r.length&&""===r[t];t++);for(var e=r.length-1;e>=0&&""===r[e];e--);return t>e?[]:r.slice(t,e-t+1)}r=exports.resolve(r).substr(1),t=exports.resolve(t).substr(1);for(var n=e(r.split("/")),s=e(t.split("/")),i=Math.min(n.length,s.length),o=i,u=0;u<i;u++)if(n[u]!==s[u]){o=u;break}for(var l=[],u=o;u<n.length;u++)l.push("..");return l=l.concat(s.slice(o)),l.join("/")},exports.sep="/",exports.delimiter=":",exports.dirname=function(r){var t=splitPath(r),e=t[0],n=t[1];return e||n?(n&&(n=n.substr(0,n.length-1)),e+n):"."},exports.basename=function(r,t){var e=splitPath(r)[2];return t&&e.substr(-1*t.length)===t&&(e=e.substr(0,e.length-t.length)),e},exports.extname=function(r){return splitPath(r)[3]};var substr="b"==="ab".substr(-1)?function(r,t,e){return r.substr(t,e)}:function(r,t,e){return t<0&&(t=r.length+t),r.substr(t,e)};

}).call(this,require('_process'))

},{"_process":80}],79:[function(require,module,exports){
function match(e){return assert.equal(typeof e,"string"),e.trim().replace(/[\?|#].*$/,"").replace(/^(?:https?\:)\/\//,"").replace(/^.*?(\/.*)/,"$1").replace(/\/$/,"")}const assert=require("assert");module.exports=match;

},{"assert":5}],80:[function(require,module,exports){
function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var u=1;u<arguments.length;u++)t[u-1]=arguments[u];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],81:[function(require,module,exports){
function pullAsync(n){var u;return function(o,r){return o?r(o):u?r(!0):void n(function(n,o){u=!0,r(n,o)})}}module.exports=pullAsync;

},{}],82:[function(require,module,exports){
function abortAll(n,t,o){function l(){--u||o(t)}var u=n.length;return u?(n.forEach(function(n){n?n(t,l):l()}),void(u||l())):o(t)}var noop=function(){};module.exports=function(n){return function(t,o){!function l(){t?abortAll(n,t,o):n.length?n[0]?n[0](null,function(t,u){t?(n.shift(),t===!0?l():abortAll(n,t,o)):o(null,u)}):(n.shift(),l()):o(!0)}()}};

},{}],83:[function(require,module,exports){
module.exports=function(n){function e(n){return{ready:!1,reading:!1,ended:!1,read:n,data:null}}function r(){if(i){d();var n=l.length,e=i;if(0===n&&(u||o))return i=null,void e(u||!0);for(var r=0;r<n;r++){var a=l[(f+r)%n];if(a.ready&&!a.ended){var t=a.data;return a.ready=!1,a.data=null,f++,i=null,e(null,t)}}}}function d(){for(var n=l.length;n--;)l[n].ended&&l.splice(n,1)}function a(){for(var n=l.length;n--;)(function(e){if(n>l.length)throw new Error("this should never happen");if(!(e.reading||e.ended||e.ready)){e.reading=!0;var d=!0;e.read(u,function n(a,t){e.data=t,e.ready=!0,e.reading=!1,a===!0||u?e.ended=!0:a&&(u=e.ended=a),u&&!a&&e.read(u,n),d||r()}),d=!1}})(l[n]);r()}function t(n,e){u=u||n,i=e,a()}var u,i,o=!!n,l=(n||[]).map(e),f=0;return t.add=function(n){return n?(l.push(e(n)),void a()):(o=!0,a())},t.cap=function(n){t.add(null)},t};

},{}],84:[function(require,module,exports){
var pushable=require("pull-pushable");module.exports=function(){function n(n){for(var e=0;e<r.length;e++)r[e].push(n);return n}var r=[];return n.listen=function(){var n=pushable(function(){var e=r.indexOf(n);e!==-1&&r.splice(e,1)});return r.push(n),n},n.abort=function(n){for(;r.length;)r[0].end(n)},n.end=function(){return n.abort(!0)},n};

},{"pull-pushable":85}],85:[function(require,module,exports){
function pullPushable(n){function u(n,u){n&&(i=n,f&&t(i)),f=u,l()}function l(){f&&(i?t(i):!o.length&&e?t(e):o.length&&t(null,o.shift()))}function t(u,l){var t=f;if(u&&n){var i=n;n=null,i(u===!0?null:u)}f=null,t(u,l)}var i,f,e,o=[];return u.end=function(n){e=e||n||!0,l()},u.push=function(n){if(!e){if(f)return void t(i,n);o.push(n),l()}},u}module.exports=pullPushable;

},{}],86:[function(require,module,exports){
"use strict";var sources=require("./sources"),sinks=require("./sinks"),throughs=require("./throughs");exports=module.exports=require("./pull");for(var k in sources)exports[k]=sources[k];for(var k in throughs)exports[k]=throughs[k];for(var k in sinks)exports[k]=sinks[k];

},{"./pull":87,"./sinks":92,"./sources":99,"./throughs":108}],87:[function(require,module,exports){
"use strict";module.exports=function r(e){var n=arguments.length;if("function"==typeof e&&1===e.length){for(var t=new Array(n),u=0;u<n;u++)t[u]=arguments[u];return function(e){if(null==t)throw new TypeError("partial sink should only be called once!");var u=t;switch(t=null,n){case 1:return r(e,u[0]);case 2:return r(e,u[0],u[1]);case 3:return r(e,u[0],u[1],u[2]);case 4:return r(e,u[0],u[1],u[2],u[3]);default:return u.unshift(e),r.apply(null,u)}}}var o=e;o&&"function"==typeof o.source&&(o=o.source);for(var u=1;u<n;u++){var c=arguments[u];"function"==typeof c?o=c(o):c&&"object"==typeof c&&(c.sink(o),o=c.source)}return o};

},{}],88:[function(require,module,exports){
"use strict";var reduce=require("./reduce");module.exports=function(e){return reduce(function(e,r){return e.push(r),e},[],e)};

},{"./reduce":95}],89:[function(require,module,exports){
"use strict";var reduce=require("./reduce");module.exports=function(e){return reduce(function(e,r){return e+r},"",e)};

},{"./reduce":95}],90:[function(require,module,exports){
"use strict";module.exports=function(n,t){function o(u){return i=u,r?o.abort():void function o(){for(var u=!0,f=!1;u;)if(f=!1,i(null,function(e,c){if(f=!0,e=e||r){if(u=!1,t)t(e===!0?null:e);else if(e&&e!==!0)throw e}else n&&!1===n(c)||r?(u=!1,i(r||!0,t||function(){})):u||o()}),!f)return void(u=!1)}()}var i,r;return o.abort=function(n,t){if("function"==typeof n&&(t=n,n=!0),r=n||!0,i)return i(r,t||function(){})},o};

},{}],91:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop"),drain=require("./drain");module.exports=function(r,n){var i=!1;return n?r=prop(r)||id:(n=r,r=id),drain(function(u){if(r(u))return i=!0,n(null,u),!1},function(r){i||n(r===!0?null:r,null)})};

},{"../util/prop":115,"./drain":90}],92:[function(require,module,exports){
"use strict";module.exports={drain:require("./drain"),onEnd:require("./on-end"),log:require("./log"),find:require("./find"),reduce:require("./reduce"),collect:require("./collect"),concat:require("./concat")};

},{"./collect":88,"./concat":89,"./drain":90,"./find":91,"./log":93,"./on-end":94,"./reduce":95}],93:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(r){return drain(function(r){console.log(r)},r)};

},{"./drain":90}],94:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(r){return drain(null,r)};

},{"./drain":90}],95:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(n,r,i){return drain(function(i){r=n(r,i)},function(n){i(n,r)})};

},{"./drain":90}],96:[function(require,module,exports){
"use strict";module.exports=function(n){var r=0;return n=n||1/0,function(t,u){return t?u&&u(t):r>n?u(!0):void u(null,r++)}};

},{}],97:[function(require,module,exports){
"use strict";module.exports=function(){return function(t,n){n(!0)}};

},{}],98:[function(require,module,exports){
"use strict";module.exports=function(t){return function(n,u){u(t)}};

},{}],99:[function(require,module,exports){
"use strict";module.exports={keys:require("./keys"),once:require("./once"),values:require("./values"),count:require("./count"),infinite:require("./infinite"),empty:require("./empty"),error:require("./error")};

},{"./count":96,"./empty":97,"./error":98,"./infinite":100,"./keys":101,"./once":102,"./values":103}],100:[function(require,module,exports){
"use strict";module.exports=function(n){return n=n||Math.random,function(t,r){return t?r&&r(t):r(null,n())}};

},{}],101:[function(require,module,exports){
"use strict";var values=require("./values");module.exports=function(e){return values(Object.keys(e))};

},{"./values":103}],102:[function(require,module,exports){
"use strict";var abortCb=require("../util/abort-cb");module.exports=function(r,t){return function(u,e){if(u)return abortCb(e,u,t);if(null!=r){var l=r;r=null,e(null,l)}else e(!0)}};

},{"../util/abort-cb":114}],103:[function(require,module,exports){
"use strict";var abortCb=require("../util/abort-cb");module.exports=function(r,t){if(!r)return function(r,n){return r?abortCb(n,r,t):n(!0)};Array.isArray(r)||(r=Object.keys(r).map(function(t){return r[t]}));var n=0;return function(u,e){return u?abortCb(e,u,t):void(n>=r.length?e(!0):e(null,r[n++]))}};

},{"../util/abort-cb":114}],104:[function(require,module,exports){
"use strict";function id(n){return n}var prop=require("../util/prop");module.exports=function(n){if(!n)return id;n=prop(n);var r,u,t=!1;return function(i){return function o(e,c){return u?c(u):void(e?(u=e,t?i(e,function(){t?r=c:c(e)}):i(e,c)):i(null,function(i,e){i?c(i):u?c(u):(t=!0,n(e,function(n,i){t=!1,u?(c(u),r(u)):n?o(n,c):c(null,i)}))}))}}};

},{"../util/prop":115}],105:[function(require,module,exports){
"use strict";var tester=require("../util/tester"),filter=require("./filter");module.exports=function(e){return e=tester(e),filter(function(r){return!e(r)})};

},{"../util/tester":116,"./filter":106}],106:[function(require,module,exports){
"use strict";var tester=require("../util/tester");module.exports=function(t){return t=tester(t),function(r){return function e(n,u){for(var i,o=!0;o;)o=!1,i=!0,r(n,function(r,n){return r||t(n)?void u(r,n):i?o=!0:e(r,u)}),i=!1}}};

},{"../util/tester":116}],107:[function(require,module,exports){
"use strict";var values=require("../sources/values"),once=require("../sources/once");module.exports=function(){return function(n){var u;return function(e,o){function r(){u(null,function(u,e){u===!0?t():u?n(!0,function(n){o(u)}):o(null,e)})}function t(){u=null,n(null,function(n,e){return n?o(n):(Array.isArray(e)||e&&"object"==typeof e?e=values(e):"function"!=typeof e&&(e=once(e)),u=e,void r())})}e?u?u(e,function(u){n(u||e,o)}):n(e,o):u?r():t()}}};

},{"../sources/once":102,"../sources/values":103}],108:[function(require,module,exports){
"use strict";module.exports={map:require("./map"),asyncMap:require("./async-map"),filter:require("./filter"),filterNot:require("./filter-not"),through:require("./through"),take:require("./take"),unique:require("./unique"),nonUnique:require("./non-unique"),flatten:require("./flatten")};

},{"./async-map":104,"./filter":106,"./filter-not":105,"./flatten":107,"./map":109,"./non-unique":110,"./take":111,"./through":112,"./unique":113}],109:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop");module.exports=function(r){return r?(r=prop(r),function(n){return function(t,u){n(t,function(t,i){try{i=t?null:r(i)}catch(r){return n(r,function(){return u(r)})}u(t,i)})}}):id};

},{"../util/prop":115}],110:[function(require,module,exports){
"use strict";var unique=require("./unique");module.exports=function(u){return unique(u,!0)};

},{"./unique":113}],111:[function(require,module,exports){
"use strict";module.exports=function(n,u){u=u||{};var t=u.last||!1,r=!1;if("number"==typeof n){t=!0;var o=n;n=function(){return--o}}return function(u){function o(n){u(!0,function(u){t=!1,n(u||!0)})}return function(f,i){r?t?o(i):i(r):(r=f)?u(r,i):u(null,function(u,f){(r=r||u)?i(r):n(f)?i(null,f):(r=!0,t?i(null,f):o(i))})}}};

},{}],112:[function(require,module,exports){
"use strict";module.exports=function(n,t){function u(n){!r&&t&&(r=!0,t(n===!0?null:n))}var r=!1;return function(t){return function(r,o){return r&&u(r),t(r,function(t,r){t?u(t):n&&n(r),o(t,r)})}}};

},{}],113:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop"),filter=require("./filter");module.exports=function(r,e){r=prop(r)||id;var t={};return filter(function(i){var u=r(i);return t[u]?!!e:(t[u]=!0,!e)})};

},{"../util/prop":115,"./filter":106}],114:[function(require,module,exports){
module.exports=function(l,n,o){l(n),o&&o(n===!0?null:n)};

},{}],115:[function(require,module,exports){
module.exports=function(e){return e&&("string"==typeof e?function(t){return t[e]}:"object"==typeof e&&"function"==typeof e.exec?function(t){var n=e.exec(t);return n&&n[0]}:e)};

},{}],116:[function(require,module,exports){
function id(t){return t}var prop=require("./prop");module.exports=function(t){return"object"==typeof t&&"function"==typeof t.test?function(r){return t.test(r)}:prop(t)||id};

},{"./prop":115}],117:[function(require,module,exports){
(function (global){
!function(e){function o(e){throw new RangeError(T[e])}function n(e,o){for(var n=e.length,r=[];n--;)r[n]=o(e[n]);return r}function r(e,o){var r=e.split("@"),t="";r.length>1&&(t=r[0]+"@",e=r[1]),e=e.replace(S,".");var u=e.split("."),i=n(u,o).join(".");return t+i}function t(e){for(var o,n,r=[],t=0,u=e.length;t<u;)o=e.charCodeAt(t++),o>=55296&&o<=56319&&t<u?(n=e.charCodeAt(t++),56320==(64512&n)?r.push(((1023&o)<<10)+(1023&n)+65536):(r.push(o),t--)):r.push(o);return r}function u(e){return n(e,function(e){var o="";return e>65535&&(e-=65536,o+=P(e>>>10&1023|55296),e=56320|1023&e),o+=P(e)}).join("")}function i(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:b}function f(e,o){return e+22+75*(e<26)-((0!=o)<<5)}function c(e,o,n){var r=0;for(e=n?M(e/j):e>>1,e+=M(e/o);e>L*C>>1;r+=b)e=M(e/L);return M(r+(L+1)*e/(e+m))}function l(e){var n,r,t,f,l,s,d,a,p,h,v=[],g=e.length,w=0,m=I,j=A;for(r=e.lastIndexOf(E),r<0&&(r=0),t=0;t<r;++t)e.charCodeAt(t)>=128&&o("not-basic"),v.push(e.charCodeAt(t));for(f=r>0?r+1:0;f<g;){for(l=w,s=1,d=b;f>=g&&o("invalid-input"),a=i(e.charCodeAt(f++)),(a>=b||a>M((x-w)/s))&&o("overflow"),w+=a*s,p=d<=j?y:d>=j+C?C:d-j,!(a<p);d+=b)h=b-p,s>M(x/h)&&o("overflow"),s*=h;n=v.length+1,j=c(w-l,n,0==l),M(w/n)>x-m&&o("overflow"),m+=M(w/n),w%=n,v.splice(w++,0,m)}return u(v)}function s(e){var n,r,u,i,l,s,d,a,p,h,v,g,w,m,j,F=[];for(e=t(e),g=e.length,n=I,r=0,l=A,s=0;s<g;++s)v=e[s],v<128&&F.push(P(v));for(u=i=F.length,i&&F.push(E);u<g;){for(d=x,s=0;s<g;++s)v=e[s],v>=n&&v<d&&(d=v);for(w=u+1,d-n>M((x-r)/w)&&o("overflow"),r+=(d-n)*w,n=d,s=0;s<g;++s)if(v=e[s],v<n&&++r>x&&o("overflow"),v==n){for(a=r,p=b;h=p<=l?y:p>=l+C?C:p-l,!(a<h);p+=b)j=a-h,m=b-h,F.push(P(f(h+j%m,0))),a=M(j/m);F.push(P(f(a,0))),l=c(r,w,u==i),r=0,++u}++r,++n}return F.join("")}function d(e){return r(e,function(e){return F.test(e)?l(e.slice(4).toLowerCase()):e})}function a(e){return r(e,function(e){return O.test(e)?"xn--"+s(e):e})}var p="object"==typeof exports&&exports&&!exports.nodeType&&exports,h="object"==typeof module&&module&&!module.nodeType&&module,v="object"==typeof global&&global;v.global!==v&&v.window!==v&&v.self!==v||(e=v);var g,w,x=2147483647,b=36,y=1,C=26,m=38,j=700,A=72,I=128,E="-",F=/^xn--/,O=/[^\x20-\x7E]/,S=/[\x2E\u3002\uFF0E\uFF61]/g,T={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},L=b-y,M=Math.floor,P=String.fromCharCode;if(g={version:"1.4.1",ucs2:{decode:t,encode:u},decode:l,encode:s,toASCII:a,toUnicode:d},"function"==typeof define&&"object"==typeof define.amd&&define.amd)define("punycode",function(){return g});else if(p&&h)if(module.exports==p)h.exports=g;else for(w in g)g.hasOwnProperty(w)&&(p[w]=g[w]);else e.punycode=g}(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],118:[function(require,module,exports){
"use strict";function hasOwnProperty(r,e){return Object.prototype.hasOwnProperty.call(r,e)}module.exports=function(r,e,t,n){e=e||"&",t=t||"=";var o={};if("string"!=typeof r||0===r.length)return o;var a=/\+/g;r=r.split(e);var s=1e3;n&&"number"==typeof n.maxKeys&&(s=n.maxKeys);var p=r.length;s>0&&p>s&&(p=s);for(var y=0;y<p;++y){var u,c,i,l,f=r[y].replace(a,"%20"),v=f.indexOf(t);v>=0?(u=f.substr(0,v),c=f.substr(v+1)):(u=f,c=""),i=decodeURIComponent(u),l=decodeURIComponent(c),hasOwnProperty(o,i)?isArray(o[i])?o[i].push(l):o[i]=[o[i],l]:o[i]=l}return o};var isArray=Array.isArray||function(r){return"[object Array]"===Object.prototype.toString.call(r)};

},{}],119:[function(require,module,exports){
"use strict";function map(r,e){if(r.map)return r.map(e);for(var t=[],n=0;n<r.length;n++)t.push(e(r[n],n));return t}var stringifyPrimitive=function(r){switch(typeof r){case"string":return r;case"boolean":return r?"true":"false";case"number":return isFinite(r)?r:"";default:return""}};module.exports=function(r,e,t,n){return e=e||"&",t=t||"=",null===r&&(r=void 0),"object"==typeof r?map(objectKeys(r),function(n){var i=encodeURIComponent(stringifyPrimitive(n))+t;return isArray(r[n])?map(r[n],function(r){return i+encodeURIComponent(stringifyPrimitive(r))}).join(e):i+encodeURIComponent(stringifyPrimitive(r[n]))}).join(e):n?encodeURIComponent(stringifyPrimitive(n))+t+encodeURIComponent(stringifyPrimitive(r)):""};var isArray=Array.isArray||function(r){return"[object Array]"===Object.prototype.toString.call(r)},objectKeys=Object.keys||function(r){var e=[];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&e.push(t);return e};

},{}],120:[function(require,module,exports){
"use strict";exports.decode=exports.parse=require("./decode"),exports.encode=exports.stringify=require("./encode");

},{"./decode":118,"./encode":119}],121:[function(require,module,exports){
var events=require("events"),utils=require("./utils"),wrap=exports.wrap={fn:function(emitter,fn,strict,name,scope){var wrapped=function(){var t;utils.emitEvents(emitter,"before",name,[arguments,this,name]);try{t=fn.apply(scope||this,arguments)}catch(t){throw utils.emitEvents(emitter,"error",name,[t,arguments,this,name]),t}return utils.emitEvents(emitter,"after",name,[t,arguments,this,name]),t};return strict&&eval("wrapped = "+utils.addArgs(wrapped.toString(),fn.length)),wrapped},async:function(emitter,fn,position,strict,name,scope){var wrapped=function(){var t=position==-1?arguments.length-1:position||0,e=arguments[t],r=this,n=arguments,i=function(){try{e.apply(e,arguments)}catch(t){throw utils.emitEvents(emitter,"error",name,[t,n,r,name]),t}var t=arguments[0]instanceof Error?"error":"after";utils.emitEvents(emitter,t,name,[arguments,n,r,name])};utils.emitEvents(emitter,"before",name,[n,this,name]),n[t]=i;try{return fn.apply(scope||this,n)}catch(t){throw utils.emitEvents(emitter,"error",name,[t,n,r,name]),t}};return strict&&eval("wrapped = "+utils.addArgs(wrapped.toString(),fn.length)),wrapped}},Emitter=exports.Emitter=function(t){this.obj=t};Emitter.prototype=Object.create(events.EventEmitter.prototype),Emitter.prototype.punch=function(t,e,r){if(Array.isArray(t)){var n=this;t.forEach(function(t){n.punch(t,e,r)})}else{var i=this.obj[t];"function"==typeof i&&(this.obj[t]=e||0===e?wrap.async(this,i,e,r,t):wrap.fn(this,i,r,t))}return this},exports.emitter=function(t){return new Emitter(t)};

},{"./utils":122,"events":13}],122:[function(require,module,exports){
exports.toBase26=function(r){for(var t="",e="abcdefghijklmnopqrstuvwxyz";r>25;){var n=r%26;t=e.charAt(n)+t,r=Math.floor(r/26)-1}return t=e.charAt(r)+t},exports.makeFakeArgs=function(r){for(var t=[],e=0;e<r;e++)t.push(exports.toBase26(e));return t.join(",")},exports.addArgs=function(r,t){return r.replace(/function\s*\(\)/,"function("+exports.makeFakeArgs(t)+")")},exports.emitEvents=function(r,t,e,n){var o=e?e.replace(/^\w/,function(r){return r.toUpperCase()}):null;r.emit.apply(r,[t].concat(n)),o&&r.emit.apply(r,[t+o].concat(n))};

},{}],123:[function(require,module,exports){
function history(o){assert.equal(typeof o,"function","cb must be a function"),window.onpopstate=function(){o(document.location.href)}}const document=require("global/document"),window=require("global/window"),assert=require("assert");module.exports=history;

},{"assert":5,"global/document":47,"global/window":48}],124:[function(require,module,exports){
function href(e){assert.equal(typeof e,"function","cb must be a function"),window.onclick=function(o){const t=function e(o){if(o)return"a"!==o.localName?e(o.parentNode):void 0===o.href?e(o.parentNode):window.location.host!==o.host?e(o.parentNode):o}(o.target);if(t){o.preventDefault();const n=t.href.replace(/#$/,"");e(n),window.history.pushState({},null,n)}}}const window=require("global/window"),assert=require("assert");module.exports=href;

},{"assert":5,"global/window":48}],125:[function(require,module,exports){
function sheetRouter(e,t,r){r=r?r(_createRoute):_createRoute,t||(t=e,e=""),assert.equal(typeof e,"string","sheet-router: dft must be a string"),assert.equal(typeof t,"function","sheet-router: createTree must be a function"),assert.equal(typeof r,"function","sheet-router: createRoute must be a function");const n=wayfarer(e),a=t(r);return function e(t,r){if(Array.isArray(t[0]))t.forEach(function(t){e(t,r)});else if(t[1]){const a=t[0]?r.concat(t[0]).join("/"):r.length?r.join("/"):t[0];n.on(a,t[1]),e(t[2],r.concat(t[0]))}else if(Array.isArray(t[2]))e(t[2],r.concat(t[0]));else{const s=t[0]?r.concat(t[0]).join("/"):r.length?r.join("/"):t[0];n.on(s,t[2])}}(a,[]),function(e){assert.equal(typeof e,"string","route must be a string");const t=[].slice.call(arguments);return t[0]=pathname(t[0]),n.apply(null,t)}}function _createRoute(e,t,r){return r||(r=t,t=null),assert.equal(typeof e,"string","route must be a string"),assert.ok(r,"child exists"),e=e.replace(/^\//,""),[e,t,r]}const pathname=require("pathname-match"),wayfarer=require("wayfarer"),assert=require("assert");module.exports=sheetRouter;

},{"assert":5,"pathname-match":79,"wayfarer":136}],126:[function(require,module,exports){
function noop(){}function serialize(e){if(!isObject(e))return e;var t=[];for(var r in e)pushEncodedKeyValuePair(t,r,e[r]);return t.join("&")}function pushEncodedKeyValuePair(e,t,r){if(null!=r)if(Array.isArray(r))r.forEach(function(r){pushEncodedKeyValuePair(e,t,r)});else if(isObject(r))for(var s in r)pushEncodedKeyValuePair(e,t+"["+s+"]",r[s]);else e.push(encodeURIComponent(t)+"="+encodeURIComponent(r));else null===r&&e.push(encodeURIComponent(t))}function parseString(e){for(var t,r,s={},n=e.split("&"),o=0,i=n.length;o<i;++o)t=n[o],r=t.indexOf("="),r==-1?s[decodeURIComponent(t)]="":s[decodeURIComponent(t.slice(0,r))]=decodeURIComponent(t.slice(r+1));return s}function parseHeader(e){var t,r,s,n,o=e.split(/\r?\n/),i={};o.pop();for(var u=0,a=o.length;u<a;++u)r=o[u],t=r.indexOf(":"),s=r.slice(0,t).toLowerCase(),n=trim(r.slice(t+1)),i[s]=n;return i}function isJSON(e){return/[\/+]json\b/.test(e)}function type(e){return e.split(/ *; */).shift()}function params(e){return e.split(/ *; */).reduce(function(e,t){var r=t.split(/ *= */),s=r.shift(),n=r.shift();return s&&n&&(e[s]=n),e},{})}function Response(e,t){t=t||{},this.req=e,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||"undefined"==typeof this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText,this._setStatusProperties(this.xhr.status),this.header=this.headers=parseHeader(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this._setHeaderProperties(this.header),this.body="HEAD"!=this.req.method?this._parseBody(this.text?this.text:this.xhr.response):null}function Request(e,t){var r=this;this._query=this._query||[],this.method=e,this.url=t,this.header={},this._header={},this.on("end",function(){var e=null,t=null;try{t=new Response(r)}catch(t){return e=new Error("Parser is unable to parse the response"),e.parse=!0,e.original=t,e.rawResponse=r.xhr&&r.xhr.responseText?r.xhr.responseText:null,e.statusCode=r.xhr&&r.xhr.status?r.xhr.status:null,r.callback(e)}r.emit("response",t);var s;try{(t.status<200||t.status>=300)&&(s=new Error(t.statusText||"Unsuccessful HTTP response"),s.original=e,s.response=t,s.status=t.status)}catch(e){s=e}s?r.callback(s,t):r.callback(null,t)})}function del(e,t){var r=request("DELETE",e);return t&&r.end(t),r}var root;"undefined"!=typeof window?root=window:"undefined"!=typeof self?root=self:(console.warn("Using browser-only version of superagent in non-browser environment"),root=this);var Emitter=require("emitter"),requestBase=require("./request-base"),isObject=require("./is-object"),request=module.exports=require("./request").bind(null,Request);request.getXHR=function(){if(!(!root.XMLHttpRequest||root.location&&"file:"==root.location.protocol&&root.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(e){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(e){}throw Error("Browser-only verison of superagent could not find XHR")};var trim="".trim?function(e){return e.trim()}:function(e){return e.replace(/(^\s*|\s*$)/g,"")};request.serializeObject=serialize,request.parseString=parseString,request.types={html:"text/html",json:"application/json",xml:"application/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},request.serialize={"application/x-www-form-urlencoded":serialize,"application/json":JSON.stringify},request.parse={"application/x-www-form-urlencoded":parseString,"application/json":JSON.parse},Response.prototype.get=function(e){return this.header[e.toLowerCase()]},Response.prototype._setHeaderProperties=function(e){var t=this.header["content-type"]||"";this.type=type(t);var r=params(t);for(var s in r)this[s]=r[s]},Response.prototype._parseBody=function(e){var t=request.parse[this.type];return!t&&isJSON(this.type)&&(t=request.parse["application/json"]),t&&e&&(e.length||e instanceof Object)?t(e):null},Response.prototype._setStatusProperties=function(e){1223===e&&(e=204);var t=e/100|0;this.status=this.statusCode=e,this.statusType=t,this.info=1==t,this.ok=2==t,this.clientError=4==t,this.serverError=5==t,this.error=(4==t||5==t)&&this.toError(),this.accepted=202==e,this.noContent=204==e,this.badRequest=400==e,this.unauthorized=401==e,this.notAcceptable=406==e,this.notFound=404==e,this.forbidden=403==e},Response.prototype.toError=function(){var e=this.req,t=e.method,r=e.url,s="cannot "+t+" "+r+" ("+this.status+")",n=new Error(s);return n.status=this.status,n.method=t,n.url=r,n},request.Response=Response,Emitter(Request.prototype);for(var key in requestBase)Request.prototype[key]=requestBase[key];Request.prototype.type=function(e){return this.set("Content-Type",request.types[e]||e),this},Request.prototype.responseType=function(e){return this._responseType=e,this},Request.prototype.accept=function(e){return this.set("Accept",request.types[e]||e),this},Request.prototype.auth=function(e,t,r){switch(r||(r={type:"basic"}),r.type){case"basic":var s=btoa(e+":"+t);this.set("Authorization","Basic "+s);break;case"auto":this.username=e,this.password=t}return this},Request.prototype.query=function(e){return"string"!=typeof e&&(e=serialize(e)),e&&this._query.push(e),this},Request.prototype.attach=function(e,t,r){return this._getFormData().append(e,t,r||t.name),this},Request.prototype._getFormData=function(){return this._formData||(this._formData=new root.FormData),this._formData},Request.prototype.callback=function(e,t){var r=this._callback;this.clearTimeout(),r(e,t)},Request.prototype.crossDomainError=function(){var e=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");e.crossDomain=!0,e.status=this.status,e.method=this.method,e.url=this.url,this.callback(e)},Request.prototype._timeoutError=function(){var e=this._timeout,t=new Error("timeout of "+e+"ms exceeded");t.timeout=e,this.callback(t)},Request.prototype._appendQueryString=function(){var e=this._query.join("&");e&&(this.url+=~this.url.indexOf("?")?"&"+e:"?"+e)},Request.prototype.end=function(e){var t=this,r=this.xhr=request.getXHR(),s=this._timeout,n=this._formData||this._data;this._callback=e||noop,r.onreadystatechange=function(){if(4==r.readyState){var e;try{e=r.status}catch(t){e=0}if(0==e){if(t.timedout)return t._timeoutError();if(t._aborted)return;return t.crossDomainError()}t.emit("end")}};var o=function(e){e.total>0&&(e.percent=e.loaded/e.total*100),e.direction="download",t.emit("progress",e)};this.hasListeners("progress")&&(r.onprogress=o);try{r.upload&&this.hasListeners("progress")&&(r.upload.onprogress=o)}catch(e){}if(s&&!this._timer&&(this._timer=setTimeout(function(){t.timedout=!0,t.abort()},s)),this._appendQueryString(),this.username&&this.password?r.open(this.method,this.url,!0,this.username,this.password):r.open(this.method,this.url,!0),this._withCredentials&&(r.withCredentials=!0),"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof n&&!this._isHost(n)){var i=this._header["content-type"],u=this._serializer||request.serialize[i?i.split(";")[0]:""];!u&&isJSON(i)&&(u=request.serialize["application/json"]),u&&(n=u(n))}for(var a in this.header)null!=this.header[a]&&r.setRequestHeader(a,this.header[a]);return this._responseType&&(r.responseType=this._responseType),this.emit("request",this),r.send("undefined"!=typeof n?n:null),this},request.Request=Request,request.get=function(e,t,r){var s=request("GET",e);return"function"==typeof t&&(r=t,t=null),t&&s.query(t),r&&s.end(r),s},request.head=function(e,t,r){var s=request("HEAD",e);return"function"==typeof t&&(r=t,t=null),t&&s.send(t),r&&s.end(r),s},request.options=function(e,t,r){var s=request("OPTIONS",e);return"function"==typeof t&&(r=t,t=null),t&&s.send(t),r&&s.end(r),s},request.del=del,request.delete=del,request.patch=function(e,t,r){var s=request("PATCH",e);return"function"==typeof t&&(r=t,t=null),t&&s.send(t),r&&s.end(r),s},request.post=function(e,t,r){var s=request("POST",e);return"function"==typeof t&&(r=t,t=null),t&&s.send(t),r&&s.end(r),s},request.put=function(e,t,r){var s=request("PUT",e);return"function"==typeof t&&(r=t,t=null),t&&s.send(t),r&&s.end(r),s};

},{"./is-object":127,"./request":129,"./request-base":128,"emitter":8}],127:[function(require,module,exports){
function isObject(e){return null!==e&&"object"==typeof e}module.exports=isObject;

},{}],128:[function(require,module,exports){
var isObject=require("./is-object");exports.clearTimeout=function(){return this._timeout=0,clearTimeout(this._timer),this},exports.parse=function(t){return this._parser=t,this},exports.serialize=function(t){return this._serializer=t,this},exports.timeout=function(t){return this._timeout=t,this},exports.then=function(t,e){if(!this._fullfilledPromise){var i=this;this._fullfilledPromise=new Promise(function(t,e){i.end(function(i,r){i?e(i):t(r)})})}return this._fullfilledPromise.then(t,e)},exports.use=function(t){return t(this),this},exports.get=function(t){return this._header[t.toLowerCase()]},exports.getHeader=exports.get,exports.set=function(t,e){if(isObject(t)){for(var i in t)this.set(i,t[i]);return this}return this._header[t.toLowerCase()]=e,this.header[t]=e,this},exports.unset=function(t){return delete this._header[t.toLowerCase()],delete this.header[t],this},exports.field=function(t,e){return this._getFormData().append(t,e),this},exports.abort=function(){return this._aborted?this:(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort"),this)},exports.withCredentials=function(){return this._withCredentials=!0,this},exports.redirects=function(t){return this._maxRedirects=t,this},exports.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},exports._isHost=function(t){var e={}.toString.call(t);switch(e){case"[object File]":case"[object Blob]":case"[object FormData]":return!0;default:return!1}},exports.send=function(t){var e=isObject(t),i=this._header["content-type"];if(e&&isObject(this._data))for(var r in t)this._data[r]=t[r];else"string"==typeof t?(i||this.type("form"),i=this._header["content-type"],"application/x-www-form-urlencoded"==i?this._data=this._data?this._data+"&"+t:t:this._data=(this._data||"")+t):this._data=t;return!e||this._isHost(t)?this:(i||this.type("json"),this)};

},{"./is-object":127}],129:[function(require,module,exports){
function request(e,n,t){return"function"==typeof t?new e("GET",n).end(t):2==arguments.length?new e("GET",n):new e(n,t)}module.exports=request;

},{}],130:[function(require,module,exports){
!function(t,e){"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?module.exports=e():t.Proto=e()}(this,function(){function t(t,e,n,o){return function(){var r=this._super;this._super="function"==typeof e?e:t[n];var i=o.apply(this,arguments);return this._super=r,i}}function e(e,n){var o,r=n||this,i=/\b_super\b/,f=Object.getPrototypeOf(r)||r.prototype;for(var c in e)o=r[c],("function"==typeof e[c]&&"function"==typeof f[c]||"function"==typeof o&&"function"==typeof e[c])&&i.test(e[c])?r[c]=t(f,o,c,e[c]):r[c]=e[c];return r}function n(e,n){var o=n||this,r=/\b_super\b/,i=Object.getPrototypeOf(o)||o.prototype,f={},c=e,p=function(t){f[t]||(f[t]=Object.getOwnPropertyDescriptor(c,t))};do Object.getOwnPropertyNames(c).forEach(p);while((c=Object.getPrototypeOf(c))&&Object.getPrototypeOf(c));return Object.keys(f).forEach(function(e){var n=f[e];"function"==typeof n.value&&r.test(n.value)&&(n.value=t(i,o[e],e,n.value)),Object.defineProperty(o,e,n)}),o}return{create:function(){var t=Object.create(this),e="string"==typeof t.__init?t.__init:"init";return"function"==typeof t[e]&&t[e].apply(t,arguments),t},mixin:"function"==typeof Object.defineProperty?n:e,extend:function(t,e){return this.mixin(t,Object.create(e||this))},proxy:function(t){var e=this[t],n=Array.prototype.slice.call(arguments,1);return n.unshift(this),e.bind.apply(e,n)}}});

},{}],131:[function(require,module,exports){
"use strict";function Url(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}function urlParse(t,s,e){if(t&&util.isObject(t)&&t instanceof Url)return t;var h=new Url;return h.parse(t,s,e),h}function urlFormat(t){return util.isString(t)&&(t=urlParse(t)),t instanceof Url?t.format():Url.prototype.format.call(t)}function urlResolve(t,s){return urlParse(t,!1,!0).resolve(s)}function urlResolveObject(t,s){return t?urlParse(t,!1,!0).resolveObject(s):s}var punycode=require("punycode"),util=require("./util");exports.parse=urlParse,exports.resolve=urlResolve,exports.resolveObject=urlResolveObject,exports.format=urlFormat,exports.Url=Url;var protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,simplePathPattern=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,delims=["<",">",'"',"`"," ","\r","\n","\t"],unwise=["{","}","|","\\","^","`"].concat(delims),autoEscape=["'"].concat(unwise),nonHostChars=["%","/","?",";","#"].concat(autoEscape),hostEndingChars=["/","?","#"],hostnameMaxLen=255,hostnamePartPattern=/^[+a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,unsafeProtocol={javascript:!0,"javascript:":!0},hostlessProtocol={javascript:!0,"javascript:":!0},slashedProtocol={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},querystring=require("querystring");Url.prototype.parse=function(t,s,e){if(!util.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var h=t.indexOf("?"),r=h!==-1&&h<t.indexOf("#")?"?":"#",a=t.split(r),o=/\\/g;a[0]=a[0].replace(o,"/"),t=a.join(r);var n=t;if(n=n.trim(),!e&&1===t.split("#").length){var i=simplePathPattern.exec(n);if(i)return this.path=n,this.href=n,this.pathname=i[1],i[2]?(this.search=i[2],s?this.query=querystring.parse(this.search.substr(1)):this.query=this.search.substr(1)):s&&(this.search="",this.query={}),this}var l=protocolPattern.exec(n);if(l){l=l[0];var u=l.toLowerCase();this.protocol=u,n=n.substr(l.length)}if(e||l||n.match(/^\/\/[^@\/]+@[^@\/]+/)){var p="//"===n.substr(0,2);!p||l&&hostlessProtocol[l]||(n=n.substr(2),this.slashes=!0)}if(!hostlessProtocol[l]&&(p||l&&!slashedProtocol[l])){for(var c=-1,f=0;f<hostEndingChars.length;f++){var m=n.indexOf(hostEndingChars[f]);m!==-1&&(c===-1||m<c)&&(c=m)}var v,g;g=c===-1?n.lastIndexOf("@"):n.lastIndexOf("@",c),g!==-1&&(v=n.slice(0,g),n=n.slice(g+1),this.auth=decodeURIComponent(v)),c=-1;for(var f=0;f<nonHostChars.length;f++){var m=n.indexOf(nonHostChars[f]);m!==-1&&(c===-1||m<c)&&(c=m)}c===-1&&(c=n.length),this.host=n.slice(0,c),n=n.slice(c),this.parseHost(),this.hostname=this.hostname||"";var y="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!y)for(var P=this.hostname.split(/\./),f=0,d=P.length;f<d;f++){var q=P[f];if(q&&!q.match(hostnamePartPattern)){for(var b="",O=0,j=q.length;O<j;O++)b+=q.charCodeAt(O)>127?"x":q[O];if(!b.match(hostnamePartPattern)){var x=P.slice(0,f),U=P.slice(f+1),C=q.match(hostnamePartStart);C&&(x.push(C[1]),U.unshift(C[2])),U.length&&(n="/"+U.join(".")+n),this.hostname=x.join(".");break}}}this.hostname.length>hostnameMaxLen?this.hostname="":this.hostname=this.hostname.toLowerCase(),y||(this.hostname=punycode.toASCII(this.hostname));var A=this.port?":"+this.port:"",w=this.hostname||"";this.host=w+A,this.href+=this.host,y&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==n[0]&&(n="/"+n))}if(!unsafeProtocol[u])for(var f=0,d=autoEscape.length;f<d;f++){var E=autoEscape[f];if(n.indexOf(E)!==-1){var I=encodeURIComponent(E);I===E&&(I=escape(E)),n=n.split(E).join(I)}}var R=n.indexOf("#");R!==-1&&(this.hash=n.substr(R),n=n.slice(0,R));var S=n.indexOf("?");if(S!==-1?(this.search=n.substr(S),this.query=n.substr(S+1),s&&(this.query=querystring.parse(this.query)),n=n.slice(0,S)):s&&(this.search="",this.query={}),n&&(this.pathname=n),slashedProtocol[u]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){var A=this.pathname||"",k=this.search||"";this.path=A+k}return this.href=this.format(),this},Url.prototype.format=function(){var t=this.auth||"";t&&(t=encodeURIComponent(t),t=t.replace(/%3A/i,":"),t+="@");var s=this.protocol||"",e=this.pathname||"",h=this.hash||"",r=!1,a="";this.host?r=t+this.host:this.hostname&&(r=t+(this.hostname.indexOf(":")===-1?this.hostname:"["+this.hostname+"]"),this.port&&(r+=":"+this.port)),this.query&&util.isObject(this.query)&&Object.keys(this.query).length&&(a=querystring.stringify(this.query));var o=this.search||a&&"?"+a||"";return s&&":"!==s.substr(-1)&&(s+=":"),this.slashes||(!s||slashedProtocol[s])&&r!==!1?(r="//"+(r||""),e&&"/"!==e.charAt(0)&&(e="/"+e)):r||(r=""),h&&"#"!==h.charAt(0)&&(h="#"+h),o&&"?"!==o.charAt(0)&&(o="?"+o),e=e.replace(/[?#]/g,function(t){return encodeURIComponent(t)}),o=o.replace("#","%23"),s+r+e+o+h},Url.prototype.resolve=function(t){return this.resolveObject(urlParse(t,!1,!0)).format()},Url.prototype.resolveObject=function(t){if(util.isString(t)){var s=new Url;s.parse(t,!1,!0),t=s}for(var e=new Url,h=Object.keys(this),r=0;r<h.length;r++){var a=h[r];e[a]=this[a]}if(e.hash=t.hash,""===t.href)return e.href=e.format(),e;if(t.slashes&&!t.protocol){for(var o=Object.keys(t),n=0;n<o.length;n++){var i=o[n];"protocol"!==i&&(e[i]=t[i])}return slashedProtocol[e.protocol]&&e.hostname&&!e.pathname&&(e.path=e.pathname="/"),e.href=e.format(),e}if(t.protocol&&t.protocol!==e.protocol){if(!slashedProtocol[t.protocol]){for(var l=Object.keys(t),u=0;u<l.length;u++){var p=l[u];e[p]=t[p]}return e.href=e.format(),e}if(e.protocol=t.protocol,t.host||hostlessProtocol[t.protocol])e.pathname=t.pathname;else{for(var c=(t.pathname||"").split("/");c.length&&!(t.host=c.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==c[0]&&c.unshift(""),c.length<2&&c.unshift(""),e.pathname=c.join("/")}if(e.search=t.search,e.query=t.query,e.host=t.host||"",e.auth=t.auth,e.hostname=t.hostname||t.host,e.port=t.port,e.pathname||e.search){var f=e.pathname||"",m=e.search||"";e.path=f+m}return e.slashes=e.slashes||t.slashes,e.href=e.format(),e}var v=e.pathname&&"/"===e.pathname.charAt(0),g=t.host||t.pathname&&"/"===t.pathname.charAt(0),y=g||v||e.host&&t.pathname,P=y,d=e.pathname&&e.pathname.split("/")||[],c=t.pathname&&t.pathname.split("/")||[],q=e.protocol&&!slashedProtocol[e.protocol];if(q&&(e.hostname="",e.port=null,e.host&&(""===d[0]?d[0]=e.host:d.unshift(e.host)),e.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===c[0]?c[0]=t.host:c.unshift(t.host)),t.host=null),y=y&&(""===c[0]||""===d[0])),g)e.host=t.host||""===t.host?t.host:e.host,e.hostname=t.hostname||""===t.hostname?t.hostname:e.hostname,e.search=t.search,e.query=t.query,d=c;else if(c.length)d||(d=[]),d.pop(),d=d.concat(c),e.search=t.search,e.query=t.query;else if(!util.isNullOrUndefined(t.search)){if(q){e.hostname=e.host=d.shift();var b=!!(e.host&&e.host.indexOf("@")>0)&&e.host.split("@");b&&(e.auth=b.shift(),e.host=e.hostname=b.shift())}return e.search=t.search,e.query=t.query,util.isNull(e.pathname)&&util.isNull(e.search)||(e.path=(e.pathname?e.pathname:"")+(e.search?e.search:"")),e.href=e.format(),e}if(!d.length)return e.pathname=null,e.search?e.path="/"+e.search:e.path=null,e.href=e.format(),e;for(var O=d.slice(-1)[0],j=(e.host||t.host||d.length>1)&&("."===O||".."===O)||""===O,x=0,U=d.length;U>=0;U--)O=d[U],"."===O?d.splice(U,1):".."===O?(d.splice(U,1),x++):x&&(d.splice(U,1),x--);if(!y&&!P)for(;x--;x)d.unshift("..");!y||""===d[0]||d[0]&&"/"===d[0].charAt(0)||d.unshift(""),j&&"/"!==d.join("/").substr(-1)&&d.push("");var C=""===d[0]||d[0]&&"/"===d[0].charAt(0);if(q){e.hostname=e.host=C?"":d.length?d.shift():"";var b=!!(e.host&&e.host.indexOf("@")>0)&&e.host.split("@");b&&(e.auth=b.shift(),e.host=e.hostname=b.shift())}return y=y||e.host&&d.length,y&&!C&&d.unshift(""),d.length?e.pathname=d.join("/"):(e.pathname=null,e.path=null),util.isNull(e.pathname)&&util.isNull(e.search)||(e.path=(e.pathname?e.pathname:"")+(e.search?e.search:"")),e.auth=t.auth||e.auth,e.slashes=e.slashes||t.slashes,e.href=e.format(),e},Url.prototype.parseHost=function(){var t=this.host,s=portPattern.exec(t);s&&(s=s[0],":"!==s&&(this.port=s.substr(1)),t=t.substr(0,t.length-s.length)),t&&(this.hostname=t)};

},{"./util":132,"punycode":117,"querystring":120}],132:[function(require,module,exports){
"use strict";module.exports={isString:function(n){return"string"==typeof n},isObject:function(n){return"object"==typeof n&&null!==n},isNull:function(n){return null===n},isNullOrUndefined:function(n){return null==n}};

},{}],133:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],134:[function(require,module,exports){
module.exports=function(o){return o&&"object"==typeof o&&"function"==typeof o.copy&&"function"==typeof o.fill&&"function"==typeof o.readUInt8};

},{}],135:[function(require,module,exports){
(function (process,global){
function inspect(e,r){var t={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),isBoolean(r)?t.showHidden=r:r&&exports._extend(t,r),isUndefined(t.showHidden)&&(t.showHidden=!1),isUndefined(t.depth)&&(t.depth=2),isUndefined(t.colors)&&(t.colors=!1),isUndefined(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=stylizeWithColor),formatValue(t,e,t.depth)}function stylizeWithColor(e,r){var t=inspect.styles[r];return t?"["+inspect.colors[t][0]+"m"+e+"["+inspect.colors[t][1]+"m":e}function stylizeNoColor(e,r){return e}function arrayToHash(e){var r={};return e.forEach(function(e,t){r[e]=!0}),r}function formatValue(e,r,t){if(e.customInspect&&r&&isFunction(r.inspect)&&r.inspect!==exports.inspect&&(!r.constructor||r.constructor.prototype!==r)){var n=r.inspect(t,e);return isString(n)||(n=formatValue(e,n,t)),n}var i=formatPrimitive(e,r);if(i)return i;var o=Object.keys(r),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),isError(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(r);if(0===o.length){if(isFunction(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(isRegExp(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(isDate(r))return e.stylize(Date.prototype.toString.call(r),"date");if(isError(r))return formatError(r)}var c="",a=!1,l=["{","}"];if(isArray(r)&&(a=!0,l=["[","]"]),isFunction(r)){var p=r.name?": "+r.name:"";c=" [Function"+p+"]"}if(isRegExp(r)&&(c=" "+RegExp.prototype.toString.call(r)),isDate(r)&&(c=" "+Date.prototype.toUTCString.call(r)),isError(r)&&(c=" "+formatError(r)),0===o.length&&(!a||0==r.length))return l[0]+c+l[1];if(t<0)return isRegExp(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special");e.seen.push(r);var f;return f=a?formatArray(e,r,t,s,o):o.map(function(n){return formatProperty(e,r,t,s,n,a)}),e.seen.pop(),reduceToSingleString(f,c,l)}function formatPrimitive(e,r){if(isUndefined(r))return e.stylize("undefined","undefined");if(isString(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return isNumber(r)?e.stylize(""+r,"number"):isBoolean(r)?e.stylize(""+r,"boolean"):isNull(r)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,r,t,n,i){for(var o=[],s=0,u=r.length;s<u;++s)hasOwnProperty(r,String(s))?o.push(formatProperty(e,r,t,n,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,r,t,n,i,!0))}),o}function formatProperty(e,r,t,n,i,o){var s,u,c;if(c=Object.getOwnPropertyDescriptor(r,i)||{value:r[i]},c.get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),hasOwnProperty(n,i)||(s="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=isNull(t)?formatValue(e,c.value,null):formatValue(e,c.value,t-1),u.indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n"))):u=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return u;s=JSON.stringify(""+i),s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+u}function reduceToSingleString(e,r,t){var n=0,i=e.reduce(function(e,r){return n++,r.indexOf("\n")>=0&&n++,e+r.replace(/\u001b\[\d\d?m/g,"").length+1},0);return i>60?t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+r+" "+e.join(", ")+" "+t[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||"undefined"==typeof e}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}function timestamp(){var e=new Date,r=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],r].join(" ")}function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}var formatRegExp=/%[sdj%]/g;exports.format=function(e){if(!isString(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(inspect(arguments[t]));return r.join(" ")}for(var t=1,n=arguments,i=n.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(e){return"[Circular]"}default:return e}}),s=n[t];t<i;s=n[++t])o+=isNull(s)||!isObject(s)?" "+s:" "+inspect(s);return o},exports.deprecate=function(e,r){function t(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0}return e.apply(this,arguments)}if(isUndefined(global.process))return function(){return exports.deprecate(e,r).apply(this,arguments)};if(process.noDeprecation===!0)return e;var n=!1;return t};var debugs={},debugEnviron;exports.debuglog=function(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){var r=process.pid;debugs[e]=function(){var t=exports.format.apply(exports,arguments);console.error("%s %d: %s",e,r,t)}}else debugs[e]=function(){};return debugs[e]},exports.inspect=inspect,inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=require("./support/isBuffer");var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];exports.log=function(){console.log("%s - %s",timestamp(),exports.format.apply(exports,arguments))},exports.inherits=require("inherits"),exports._extend=function(e,r){if(!r||!isObject(r))return e;for(var t=Object.keys(r),n=t.length;n--;)e[t[n]]=r[t[n]];return e};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":134,"_process":80,"inherits":133}],136:[function(require,module,exports){
function Wayfarer(r){function e(r,e){if(assert.equal(typeof r,"string"),assert.equal(typeof e,"function"),r=r||"/",e&&e._wayfarer&&e._trie)n.mount(r,e._trie.trie);else{const a=n.create(r);a.cb=e}return t}function t(r){assert.notEqual(r,void 0,"'route' must be defined");const e=Array.prototype.slice.apply(arguments),t=n.match(r);if(t&&t.cb)return e[0]=t.params,t.cb.apply(null,e);const i=n.match(a);if(i&&i.cb)return e[0]=i.params,i.cb.apply(null,e);throw new Error("route '"+r+"' did not match")}if(!(this instanceof Wayfarer))return new Wayfarer(r);const a=(r||"").replace(/^\//,""),n=trie();return t._trie=n,t.emit=t,t.on=e,t._wayfarer=!0,t}const assert=require("assert"),trie=require("./trie");module.exports=Wayfarer;

},{"./trie":137,"assert":5}],137:[function(require,module,exports){
function Trie(){return this instanceof Trie?void(this.trie={nodes:{}}):new Trie}const mutate=require("xtend/mutable"),assert=require("assert"),xtend=require("xtend");module.exports=Trie,Trie.prototype.create=function(e){assert.equal(typeof e,"string","route should be a string");const t=e.replace(/^\//,"").split("/");return function e(t,n,s){const o=s[t];if(void 0===o)return n;var r=null;return/^:/.test(o)?(n.nodes.$$?r=n.nodes.$$:(r={nodes:{}},n.nodes.$$=r),n.name=o.replace(/^:/,"")):n.nodes[o]?r=n.nodes[o]:(r={nodes:{}},n.nodes[o]=r),e(t+1,r,s)}(0,this.trie,t)},Trie.prototype.match=function(e){assert.equal(typeof e,"string","route should be a string");const t=e.replace(/^\//,"").split("/"),n={};var s=function e(s,o){if(void 0!==o){const r=t[s];return void 0===r?o:o.nodes[r]?e(s+1,o.nodes[r]):o.name?(n[o.name]=r,e(s+1,o.nodes.$$)):e(s+1)}}(0,this.trie);if(s)return s=xtend(s),s.params=n,s},Trie.prototype.mount=function(e,t){assert.equal(typeof e,"string","route should be a string"),assert.equal(typeof t,"object","trie should be a object");const n=e.replace(/^\//,"").split("/");var s=null,o=null;if(1===n.length)o=n[0],s=this.create(o);else{const r=n.splice(0,n.length-1),i=r.join("/");o=n[0],s=this.create(i)}mutate(s.nodes,t.nodes),t.name&&(s.name=t.name),s.nodes[""]&&(Object.keys(s.nodes[""]).forEach(function(e){"nodes"!==e&&(s[e]=s.nodes[""][e])}),mutate(s.nodes,s.nodes[""].nodes),delete s.nodes[""].nodes)};

},{"assert":5,"xtend":138,"xtend/mutable":139}],138:[function(require,module,exports){
function extend(){for(var r={},e=0;e<arguments.length;e++){var t=arguments[e];for(var n in t)hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;

},{}],139:[function(require,module,exports){
function extend(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;

},{}],140:[function(require,module,exports){
var bel=require("bel"),morphdom=require("morphdom"),defaultEvents=require("./update-events.js");module.exports=bel,module.exports.update=function(e,o,r){function t(e,o){for(var t=r.events||defaultEvents,n=0;n<t.length;n++){var u=t[n];o[u]?e[u]=o[u]:e[u]&&(e[u]=void 0)}("INPUT"===e.nodeName&&"file"!==e.type||"TEXTAREA"===e.nodeName||"SELECT"===e.nodeName)&&null===o.getAttribute("value")&&(o.value=e.value)}return r||(r={}),r.events!==!1&&(r.onBeforeMorphEl||(r.onBeforeMorphEl=t)),morphdom(e,o,r)};

},{"./update-events.js":141,"bel":6,"morphdom":74}],141:[function(require,module,exports){
module.exports=["onclick","ondblclick","onmousedown","onmouseup","onmouseover","onmousemove","onmouseout","ondragstart","ondrag","ondragenter","ondragleave","ondragover","ondrop","ondragend","onkeydown","onkeypress","onkeyup","onunload","onabort","onerror","onresize","onscroll","onselect","onchange","onsubmit","onreset","onfocus","onblur","oninput","oncontextmenu","onfocusin","onfocusout"];

},{}],142:[function(require,module,exports){
"use strict";var _require=require("inux"),Action=_require.Action,SET=Symbol("set"),set=Action(SET);module.exports={SET:SET,set:set};

},{"inux":66}],143:[function(require,module,exports){
"use strict";function _defineProperty(e,r,u){return r in e?Object.defineProperty(e,r,{value:u,enumerable:!0,configurable:!0,writable:!0}):e[r]=u,e}function User(e){var r=e.api;return Domain({name:"user",init:function(){return{model:[],effect:get()}},update:_defineProperty({},SET,function(e,r){return{model:r}}),run:_defineProperty({},GET,function(){return pullAsync(function(e){r.service("grads").find({},function(r,u){return console.log(r,u),r?console.error(r):void e(null,set(u))})})})})}var _require=require("inu"),html=_require.html,pull=_require.pull,_require2=require("inux"),Domain=_require2.Domain,run=_require2.run,pullAsync=require("pull-async"),_require3=require("./actions"),SET=_require3.SET,set=_require3.set,_require4=require("./effects"),GET=_require4.GET,get=_require4.get;module.exports=User;

},{"./actions":142,"./effects":144,"inu":54,"inux":66,"pull-async":81}],144:[function(require,module,exports){
"use strict";var _require=require("inux"),Effect=_require.Effect,GET=Symbol("get"),get=Effect(GET);module.exports={GET:GET,get:get};

},{"inux":66}],145:[function(require,module,exports){
"use strict";function _taggedTemplateLiteral(e,i){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(i)}}))}function user(e,i,n){var t=e.id,a=i.user.find(function(e){return e.id==t});return html(_templateObject,a?html(_templateObject2,a.image_link,a.name,a.name,a.long_description,a.phone,a.cv_link,a.github_link,a.linkedin_link,a.email,function(){return n(navigate("/"))}):html(_templateObject3))}var _templateObject=_taggedTemplateLiteral(["\n  <main>\n    <div class='grad'>\n      ","\n    </div>\n  </main>\n  "],["\n  <main>\n    <div class='grad'>\n      ","\n    </div>\n  </main>\n  "]),_templateObject2=_taggedTemplateLiteral(['<div class="grad-image">\n          <img src=',' alt="image of ','">\n        </div>\n        <div>',"</div>\n        <div>","</div>\n        <div>","</div>\n        <div>","</div>\n        <div>","</div>\n        <div>","</div>\n        <div>","</div>\n        <button onclick=",">Back</button>\n        "],['<div class="grad-image">\n          <img src=',' alt="image of ','">\n        </div>\n        <div>',"</div>\n        <div>","</div>\n        <div>","</div>\n        <div>","</div>\n        <div>","</div>\n        <div>","</div>\n        <div>","</div>\n        <button onclick=",">Back</button>\n        "]),_templateObject3=_taggedTemplateLiteral(["<h2>We got no grads</h2>"],["<h2>We got no grads</h2>"]),_require=require("inu"),html=_require.html,_require2=require("inux"),navigate=_require2.navigate;module.exports=user;

},{"inu":54,"inux":66}],146:[function(require,module,exports){
"use strict";function _taggedTemplateLiteral(t,i){return Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(i)}}))}function user(t,i){return html(_templateObject,t.image_link,t.name,t.name,t.short_description,t.phone,t.github_link,t.linkedin_link,t.email,function(){return i(navigate("#users/"+t.id))})}var _templateObject=_taggedTemplateLiteral(["\n    <div class='grad'>\n\t\t\t<div class=\"grad-image\">\n\t\t\t\t<img src=",' alt="image of ','">\n\t\t\t</div>\n\t\t\t<div>',"</div>\n\t\t\t<div>","</div>\n\t\t\t<div>","</div>\n\t\t\t<div>","</div>\n\t\t\t<div>","</div>\n\t\t\t<div>","</div>\n      <button onclick=",">More...</button>\n    </div>\n  "],["\n    <div class='grad'>\n\t\t\t<div class=\"grad-image\">\n\t\t\t\t<img src=",' alt="image of ','">\n\t\t\t</div>\n\t\t\t<div>',"</div>\n\t\t\t<div>","</div>\n\t\t\t<div>","</div>\n\t\t\t<div>","</div>\n\t\t\t<div>","</div>\n\t\t\t<div>","</div>\n      <button onclick=",">More...</button>\n    </div>\n  "]),_require=require("inu"),html=_require.html,_require2=require("inux"),navigate=_require2.navigate;module.exports=user;

},{"inu":54,"inux":66}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
